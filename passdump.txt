[0m[1m[33mwarning[0m[0m[1m: unused variable: `x`[0m
[0m [0m[0m[1m[38;5;12m--> [0m[0m<source>:8:9[0m
[0m  [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m8[0m[0m [0m[0m[1m[38;5;12m|[0m[0m [0m[0m    for x in v {[0m
[0m  [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[33m^[0m[0m [0m[0m[1m[33mhelp: if this is intentional, prefix it with an underscore: `_x`[0m
[0m  [0m[0m[1m[38;5;12m|[0m
[0m  [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_variables)]` on by default[0m

*** IR Dump Before Annotation2MetadataPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump After Annotation2MetadataPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump Before ForceFunctionAttrsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump After ForceFunctionAttrsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump Before InferFunctionAttrsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump After InferFunctionAttrsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump Before CoroEarlyPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump After CoroEarlyPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::ptr::metadata::PtrComponents<i32>" = type { ptr, {} }
%"core::ptr::metadata::PtrRepr<i32>" = type { [1 x i64] }
%"core::ptr::metadata::PtrRepr<[i32]>" = type { [2 x i64] }
%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !77 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !82
  %self1 = load ptr, ptr %1, align 8, !dbg !82, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !92
  store ptr %self1, ptr %_11, align 8, !dbg !92
  %ptr = load ptr, ptr %_11, align 8, !dbg !101, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !102
  store ptr %ptr, ptr %0, align 8, !dbg !102
  %_14 = load i64, ptr %0, align 8, !dbg !102, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !102
  %_7 = icmp eq i64 %_14, 0, !dbg !108
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !109
  %_6 = xor i1 %_7, true, !dbg !110
  call void @llvm.assume(i1 %_6), !dbg !111
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !112
  %len = load i64, ptr %2, align 8, !dbg !112, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !113
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !125
  store ptr %self1, ptr %_21, align 8, !dbg !125
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !125
  store i64 %len, ptr %3, align 8, !dbg !125
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !113
  %5 = load ptr, ptr %4, align 8, !dbg !113, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !113
  %7 = load i64, ptr %6, align 8, !dbg !113, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  store ptr %5, ptr %8, align 8, !dbg !113
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  store i64 %7, ptr %9, align 8, !dbg !113
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !126
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !113
  %_16.0 = load ptr, ptr %10, align 8, !dbg !113, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !113
  %_16.1 = load i64, ptr %11, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !127
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !128
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !128
  ret { ptr, i64 } %13, !dbg !128
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !129 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !132
  %self1 = load ptr, ptr %5, align 8, !dbg !132, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !134
  store ptr %self1, ptr %_19, align 8, !dbg !134
  %ptr = load ptr, ptr %_19, align 8, !dbg !138, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !139
  store ptr %ptr, ptr %3, align 8, !dbg !139
  %_22 = load i64, ptr %3, align 8, !dbg !139, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !139
  %_3 = icmp eq i64 %_22, 0, !dbg !144
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !145
  %_2 = xor i1 %_3, true, !dbg !146
  call void @llvm.assume(i1 %_2), !dbg !147
  br i1 true, label %bb1, label %bb2, !dbg !148

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !149
  %self4 = load ptr, ptr %6, align 8, !dbg !149, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !149, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !149
  br i1 %_10, label %bb3, label %bb4, !dbg !149

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !150, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !151
  store ptr %self2, ptr %_24, align 8, !dbg !151
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !155, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !156
  store ptr %ptr3, ptr %2, align 8, !dbg !156
  %_27 = load i64, ptr %2, align 8, !dbg !156, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !156
  %_8 = icmp eq i64 %_27, 0, !dbg !161
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !162
  %_7 = xor i1 %_8, true, !dbg !163
  call void @llvm.assume(i1 %_7), !dbg !164
  br label %bb2, !dbg !165

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !166
  br i1 false, label %bb8, label %bb9, !dbg !167

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !170
  br label %bb5, !dbg !171

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !172, !align !173, !noundef !13
  ret ptr %7, !dbg !172

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !174, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !175
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !175
  store ptr %8, ptr %0, align 8, !dbg !175
  %self8 = load ptr, ptr %0, align 8, !dbg !175, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !175
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !183
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !189
  store ptr %self8, ptr %_50, align 8, !dbg !189
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !183
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !190
  %_32 = load ptr, ptr %_49, align 8, !dbg !183, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !191
  store ptr %_32, ptr %self, align 8, !dbg !192
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !193
  %self9 = load ptr, ptr %9, align 8, !dbg !193, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !193
  br label %bb10, !dbg !194

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !195
  %self5 = load ptr, ptr %10, align 8, !dbg !195, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !196
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !198
  %self6 = load ptr, ptr %11, align 8, !dbg !198, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !200
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !200
  store ptr %12, ptr %1, align 8, !dbg !200
  %_55 = load ptr, ptr %1, align 8, !dbg !200, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !200
  store ptr %_55, ptr %_38, align 8, !dbg !207
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !211
  %14 = load ptr, ptr %_38, align 8, !dbg !211, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !211
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !212
  store ptr %self5, ptr %_16, align 8, !dbg !213
  br label %bb10, !dbg !194

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !166, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !214
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !215
  br label %bb5, !dbg !171
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !216 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !218
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !218
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !218
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !219
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !219
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !219
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !224
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !224
  ret { ptr, ptr } %5, !dbg !224
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !225 {
start:
  %0 = mul i32 %v, %v, !dbg !228
  ret i32 %0, !dbg !229
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !230 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !231
  store i32 3, ptr %s, align 4, !dbg !232
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !233
  store i32 3, ptr %d, align 4, !dbg !235
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !236
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !236
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !236
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !236
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !236
  store ptr %_4.0, ptr %1, align 8, !dbg !236
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !236
  store ptr %_4.1, ptr %2, align 8, !dbg !236
  br label %bb2, !dbg !238

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !240
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !240
  store ptr %3, ptr %_6, align 8, !dbg !240
  %4 = load ptr, ptr %_6, align 8, !dbg !240, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !240
  %6 = icmp eq i64 %5, 0, !dbg !240
  %_8 = select i1 %6, i64 0, i64 1, !dbg !240
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !240

bb5:                                              ; preds = %bb2
  unreachable, !dbg !240

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !241
  %_17 = load i32, ptr %s, align 4, !dbg !242, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !243, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !242
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !244
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !245
  ret i32 %7, !dbg !246

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !247
  %_11 = load i64, ptr %8, align 8, !dbg !247, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !251
  %9 = icmp eq i64 %_10, 0, !dbg !251
  br i1 %9, label %bb7, label %bb8, !dbg !251

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !252, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !253, !noundef !13
  %11 = add i32 %10, %_12, !dbg !253
  store i32 %11, ptr %s, align 4, !dbg !253
  br label %bb9, !dbg !254

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !255, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !255
  %_14 = sdiv i32 %_15, 80, !dbg !255
  %_13 = add i32 3, %_14, !dbg !256
  %12 = load i32, ptr %d, align 4, !dbg !257, !noundef !13
  %13 = add i32 %12, %_13, !dbg !257
  store i32 %13, ptr %d, align 4, !dbg !257
  br label %bb9, !dbg !254

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !238
  br label %bb2, !dbg !238
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 51, column: 36, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 51, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 88, column: 25, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !7, line: 87, column: 9)
!23 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!24 = !DILocation(line: 51, column: 18, scope: !15, inlinedAt: !21)
!25 = !DILocation(line: 207, column: 18, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !16, line: 207, column: 9)
!27 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!28 = !DILocation(line: 37, column: 17, scope: !29, inlinedAt: !24)
!29 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!30 = !DINamespace(name: "is_null", scope: !18)
!31 = !DILocation(line: 37, column: 13, scope: !29, inlinedAt: !24)
!32 = !DILocation(line: 51, column: 82, scope: !15, inlinedAt: !21)
!33 = !DILocation(line: 88, column: 20, scope: !22)
!34 = !DILocation(line: 88, column: 13, scope: !22)
!35 = !DILocation(line: 90, column: 17, scope: !22)
!36 = !DILocation(line: 91, column: 20, scope: !22)
!37 = !DILocation(line: 465, column: 18, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlock(scope: !39, file: !16, line: 465, column: 9)
!39 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DILocation(line: 920, column: 23, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlock(scope: !42, file: !16, line: 920, column: 9)
!42 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!43 = !DILocation(line: 91, column: 80, scope: !22)
!44 = !DILocation(line: 91, column: 17, scope: !22)
!45 = !DILocation(line: 545, column: 18, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlock(scope: !47, file: !16, line: 545, column: 9)
!47 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!48 = !DILocation(line: 1084, column: 14, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "wrapping_add<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17hcaf68de93cb01a65E", scope: !18, file: !16, line: 1080, type: !12, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DILocation(line: 1102, column: 27, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "wrapping_byte_add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_add17h2df23334b48c9eb3E", scope: !18, file: !16, line: 1101, type: !12, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!52 = !DILocation(line: 91, column: 36, scope: !22)
!53 = !DILocation(line: 118, column: 14, scope: !54, inlinedAt: !58)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 118, column: 5)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/metadata.rs", directory: "", checksumkind: CSK_MD5, checksum: "1e1a461bde75de7a93357ca7e628f393")
!56 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "metadata", scope: !20)
!58 = !DILocation(line: 98, column: 9, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!60 = !DILocation(line: 1102, column: 47, scope: !51, inlinedAt: !52)
!61 = !DILocation(line: 118, column: 36, scope: !54, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 77, scope: !54, inlinedAt: !58)
!63 = !DILocation(line: 119, column: 1, scope: !56, inlinedAt: !58)
!64 = !DILocation(line: 93, column: 25, scope: !65)
!65 = distinct !DILexicalBlock(scope: !22, file: !7, line: 90, column: 13)
!66 = !DILocation(line: 201, column: 13, scope: !67, inlinedAt: !64)
!67 = distinct !DILexicalBlock(scope: !69, file: !68, line: 199, column: 9)
!68 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/non_null.rs", directory: "", checksumkind: CSK_MD5, checksum: "489a545a71841a1f316d99c11467aaa5")
!69 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!70 = !DINamespace(name: "NonNull", scope: !71)
!71 = !DINamespace(name: "non_null", scope: !20)
!72 = !DILocation(line: 93, column: 64, scope: !65)
!73 = !DILocation(line: 93, column: 13, scope: !65)
!74 = !DILocation(line: 93, column: 90, scope: !65)
!75 = !DILocation(line: 94, column: 9, scope: !22)
!76 = !DILocation(line: 95, column: 6, scope: !6)
!77 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !79, file: !78, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!79 = !DINamespace(name: "{impl#9}", scope: !80)
!80 = !DINamespace(name: "vec", scope: !81)
!81 = !DINamespace(name: "alloc", scope: null)
!82 = !DILocation(line: 224, column: 9, scope: !83, inlinedAt: !87)
!83 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !85, file: !84, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!84 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!85 = !DINamespace(name: "RawVec", scope: !86)
!86 = !DINamespace(name: "raw_vec", scope: !81)
!87 = !DILocation(line: 1243, column: 28, scope: !88, inlinedAt: !90)
!88 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !89, file: !78, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!89 = !DINamespace(name: "Vec", scope: !80)
!90 = !DILocation(line: 2637, column: 45, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !78, line: 2637, column: 9)
!92 = !DILocation(line: 50, column: 36, scope: !93, inlinedAt: !98)
!93 = distinct !DILexicalBlock(scope: !95, file: !94, line: 50, column: 9)
!94 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!95 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!96 = !DINamespace(name: "{impl#0}", scope: !97)
!97 = !DINamespace(name: "mut_ptr", scope: !20)
!98 = !DILocation(line: 1245, column: 25, scope: !99, inlinedAt: !90)
!99 = distinct !DILexicalBlock(scope: !100, file: !78, line: 1244, column: 9)
!100 = distinct !DILexicalBlock(scope: !88, file: !78, line: 1243, column: 9)
!101 = !DILocation(line: 50, column: 18, scope: !93, inlinedAt: !98)
!102 = !DILocation(line: 213, column: 18, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlock(scope: !104, file: !94, line: 213, column: 9)
!104 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!105 = !DILocation(line: 36, column: 17, scope: !106, inlinedAt: !101)
!106 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!107 = !DINamespace(name: "is_null", scope: !96)
!108 = !DILocation(line: 36, column: 13, scope: !106, inlinedAt: !101)
!109 = !DILocation(line: 50, column: 80, scope: !93, inlinedAt: !98)
!110 = !DILocation(line: 1245, column: 20, scope: !99, inlinedAt: !90)
!111 = !DILocation(line: 1245, column: 13, scope: !99, inlinedAt: !90)
!112 = !DILocation(line: 2637, column: 55, scope: !91)
!113 = !DILocation(line: 118, column: 14, scope: !114, inlinedAt: !116)
!114 = distinct !DILexicalBlock(scope: !115, file: !55, line: 118, column: 5)
!115 = distinct !DISubprogram(name: "from_raw_parts<[i32]>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17he208da13e6cc8d00E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!116 = !DILocation(line: 734, column: 5, scope: !117, inlinedAt: !119)
!117 = distinct !DISubprogram(name: "slice_from_raw_parts<i32>", linkageName: "_ZN4core3ptr20slice_from_raw_parts17h2285385d7f72f050E", scope: !20, file: !118, line: 733, type: !12, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "bdd6b96186b52f0612a564cb734428a7")
!119 = !DILocation(line: 100, column: 11, scope: !120, inlinedAt: !124)
!120 = distinct !DILexicalBlock(scope: !122, file: !121, line: 94, column: 5)
!121 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/raw.rs", directory: "", checksumkind: CSK_MD5, checksum: "4e9e8b780584cc248c586456197d9cf5")
!122 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core5slice3raw14from_raw_parts17haeafd874e147980cE", scope: !123, file: !121, line: 92, type: !12, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DINamespace(name: "raw", scope: !10)
!124 = !DILocation(line: 2637, column: 18, scope: !91)
!125 = !DILocation(line: 118, column: 36, scope: !114, inlinedAt: !116)
!126 = !DILocation(line: 118, column: 77, scope: !114, inlinedAt: !116)
!127 = !DILocation(line: 119, column: 1, scope: !115, inlinedAt: !116)
!128 = !DILocation(line: 2638, column: 6, scope: !77)
!129 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !131, file: !130, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!130 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!131 = !DINamespace(name: "{impl#181}", scope: !9)
!132 = !DILocation(line: 132, column: 29, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !130, line: 131, column: 17)
!134 = !DILocation(line: 50, column: 36, scope: !135, inlinedAt: !137)
!135 = distinct !DILexicalBlock(scope: !136, file: !94, line: 50, column: 9)
!136 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !96, file: !94, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!137 = !DILocation(line: 132, column: 47, scope: !133)
!138 = !DILocation(line: 50, column: 18, scope: !135, inlinedAt: !137)
!139 = !DILocation(line: 213, column: 18, scope: !140, inlinedAt: !142)
!140 = distinct !DILexicalBlock(scope: !141, file: !94, line: 213, column: 9)
!141 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !96, file: !94, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!142 = !DILocation(line: 36, column: 17, scope: !143, inlinedAt: !138)
!143 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !107, file: !94, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!144 = !DILocation(line: 36, column: 13, scope: !143, inlinedAt: !138)
!145 = !DILocation(line: 50, column: 80, scope: !135, inlinedAt: !137)
!146 = !DILocation(line: 132, column: 28, scope: !133)
!147 = !DILocation(line: 132, column: 21, scope: !133)
!148 = !DILocation(line: 133, column: 24, scope: !133)
!149 = !DILocation(line: 136, column: 24, scope: !133)
!150 = !DILocation(line: 134, column: 33, scope: !133)
!151 = !DILocation(line: 51, column: 36, scope: !152, inlinedAt: !154)
!152 = distinct !DILexicalBlock(scope: !153, file: !16, line: 51, column: 9)
!153 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!154 = !DILocation(line: 134, column: 42, scope: !133)
!155 = !DILocation(line: 51, column: 18, scope: !152, inlinedAt: !154)
!156 = !DILocation(line: 207, column: 18, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlock(scope: !158, file: !16, line: 207, column: 9)
!158 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!159 = !DILocation(line: 37, column: 17, scope: !160, inlinedAt: !155)
!160 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !30, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!161 = !DILocation(line: 37, column: 13, scope: !160, inlinedAt: !155)
!162 = !DILocation(line: 51, column: 82, scope: !152, inlinedAt: !154)
!163 = !DILocation(line: 134, column: 32, scope: !133)
!164 = !DILocation(line: 134, column: 25, scope: !133)
!165 = !DILocation(line: 133, column: 21, scope: !133)
!166 = !DILocation(line: 139, column: 30, scope: !133)
!167 = !DILocation(line: 76, column: 20, scope: !168, inlinedAt: !169)
!168 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !130, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!169 = !DILocation(line: 43, column: 53, scope: !133)
!170 = !DILocation(line: 137, column: 25, scope: !133)
!171 = !DILocation(line: 136, column: 21, scope: !133)
!172 = !DILocation(line: 142, column: 14, scope: !129)
!173 = !{i64 4}
!174 = !DILocation(line: 57, column: 29, scope: !168, inlinedAt: !169)
!175 = !DILocation(line: 545, column: 18, scope: !176, inlinedAt: !178)
!176 = distinct !DILexicalBlock(scope: !177, file: !16, line: 545, column: 9)
!177 = distinct !DISubprogram(name: "wrapping_offset<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h1b7e4f8d6acacdb1E", scope: !18, file: !16, line: 540, type: !12, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!178 = !DILocation(line: 1162, column: 14, scope: !179, inlinedAt: !180)
!179 = distinct !DISubprogram(name: "wrapping_sub<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_sub17h3178f96e575ed578E", scope: !18, file: !16, line: 1158, type: !12, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!180 = !DILocation(line: 1180, column: 27, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "wrapping_byte_sub<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$17wrapping_byte_sub17he5ce9d25addf65dfE", scope: !18, file: !16, line: 1179, type: !12, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!182 = !DILocation(line: 57, column: 39, scope: !168, inlinedAt: !169)
!183 = !DILocation(line: 118, column: 14, scope: !184, inlinedAt: !186)
!184 = distinct !DILexicalBlock(scope: !185, file: !55, line: 118, column: 5)
!185 = distinct !DISubprogram(name: "from_raw_parts<i32>", linkageName: "_ZN4core3ptr8metadata14from_raw_parts17h90da012cbf550311E", scope: !57, file: !55, line: 111, type: !12, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!186 = !DILocation(line: 98, column: 9, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "with_metadata_of<u8, i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$16with_metadata_of17h25080b3f6b50df56E", scope: !18, file: !16, line: 94, type: !12, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!188 = !DILocation(line: 1180, column: 47, scope: !181, inlinedAt: !182)
!189 = !DILocation(line: 118, column: 36, scope: !184, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 77, scope: !184, inlinedAt: !186)
!191 = !DILocation(line: 119, column: 1, scope: !185, inlinedAt: !186)
!192 = !DILocation(line: 57, column: 17, scope: !168, inlinedAt: !169)
!193 = !DILocation(line: 78, column: 21, scope: !168, inlinedAt: !169)
!194 = !DILocation(line: 76, column: 17, scope: !168, inlinedAt: !169)
!195 = !DILocation(line: 80, column: 31, scope: !168, inlinedAt: !169)
!196 = !DILocation(line: 83, column: 32, scope: !197, inlinedAt: !169)
!197 = distinct !DILexicalBlock(scope: !168, file: !130, line: 80, column: 21)
!198 = !DILocation(line: 83, column: 64, scope: !199, inlinedAt: !169)
!199 = distinct !DILexicalBlock(scope: !197, file: !130, line: 83, column: 32)
!200 = !DILocation(line: 479, column: 18, scope: !201, inlinedAt: !203)
!201 = distinct !DILexicalBlock(scope: !202, file: !94, line: 479, column: 9)
!202 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !96, file: !94, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!203 = !DILocation(line: 1020, column: 23, scope: !204, inlinedAt: !206)
!204 = distinct !DILexicalBlock(scope: !205, file: !94, line: 1020, column: 9)
!205 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !96, file: !94, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!206 = !DILocation(line: 83, column: 82, scope: !199, inlinedAt: !169)
!207 = !DILocation(line: 201, column: 13, scope: !208, inlinedAt: !210)
!208 = distinct !DILexicalBlock(scope: !209, file: !68, line: 199, column: 9)
!209 = distinct !DISubprogram(name: "new_unchecked<i32>", linkageName: "_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h1f0b8f2a7f04dcbaE", scope: !70, file: !68, line: 197, type: !12, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!210 = !DILocation(line: 83, column: 41, scope: !199, inlinedAt: !169)
!211 = !DILocation(line: 83, column: 21, scope: !197, inlinedAt: !169)
!212 = !DILocation(line: 83, column: 95, scope: !197, inlinedAt: !169)
!213 = !DILocation(line: 84, column: 21, scope: !197, inlinedAt: !169)
!214 = !DILocation(line: 139, column: 25, scope: !133)
!215 = !DILocation(line: 140, column: 21, scope: !133)
!216 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !217, file: !78, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!217 = !DINamespace(name: "{impl#17}", scope: !80)
!218 = !DILocation(line: 2779, column: 9, scope: !216)
!219 = !DILocation(line: 742, column: 9, scope: !220, inlinedAt: !223)
!220 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !222, file: !221, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!221 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!222 = !DINamespace(name: "{impl#0}", scope: !10)
!223 = !DILocation(line: 2779, column: 14, scope: !216)
!224 = !DILocation(line: 2780, column: 6, scope: !216)
!225 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !227, file: !226, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!226 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!227 = !DINamespace(name: "example", scope: null)
!228 = !DILocation(line: 2, column: 5, scope: !225)
!229 = !DILocation(line: 3, column: 2, scope: !225)
!230 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !227, file: !226, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!231 = !DILocation(line: 6, column: 9, scope: !230)
!232 = !DILocation(line: 6, column: 17, scope: !230)
!233 = !DILocation(line: 7, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !226, line: 6, column: 5)
!235 = !DILocation(line: 7, column: 17, scope: !234)
!236 = !DILocation(line: 8, column: 14, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !226, line: 7, column: 5)
!238 = !DILocation(line: 8, column: 5, scope: !239)
!239 = distinct !DILexicalBlock(scope: !237, file: !226, line: 8, column: 5)
!240 = !DILocation(line: 8, column: 14, scope: !239)
!241 = !DILocation(line: 8, column: 5, scope: !237)
!242 = !DILocation(line: 15, column: 5, scope: !237)
!243 = !DILocation(line: 15, column: 9, scope: !237)
!244 = !DILocation(line: 16, column: 1, scope: !234)
!245 = !DILocation(line: 16, column: 1, scope: !230)
!246 = !DILocation(line: 16, column: 2, scope: !230)
!247 = !DILocation(line: 2062, column: 9, scope: !248, inlinedAt: !249)
!248 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !89, file: !78, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!249 = !DILocation(line: 9, column: 14, scope: !250)
!250 = distinct !DILexicalBlock(scope: !239, file: !226, line: 8, column: 16)
!251 = !DILocation(line: 9, column: 12, scope: !250)
!252 = !DILocation(line: 10, column: 18, scope: !250)
!253 = !DILocation(line: 10, column: 13, scope: !250)
!254 = !DILocation(line: 9, column: 9, scope: !250)
!255 = !DILocation(line: 12, column: 22, scope: !250)
!256 = !DILocation(line: 12, column: 18, scope: !250)
!257 = !DILocation(line: 12, column: 13, scope: !250)
*** IR Dump Before LowerExpectIntrinsicPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}
*** IR Dump After LowerExpectIntrinsicPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}
*** IR Dump Before SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  br i1 false, label %bb1, label %bb2, !dbg !36

bb2:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !37
  store ptr %3, ptr %end, align 8, !dbg !37
  br label %bb3, !dbg !44

bb1:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !45
  %4 = getelementptr i8, ptr %slice.0, i64 %slice.1, !dbg !45
  store ptr %4, ptr %0, align 8, !dbg !45
  %self = load ptr, ptr %0, align 8, !dbg !45, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !45
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !53
  call void @llvm.lifetime.start.p0(i64 8, ptr %_25), !dbg !61
  store ptr %self, ptr %_25, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_24, ptr align 8 %_25, i64 8, i1 false), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_25), !dbg !62
  %5 = load ptr, ptr %_24, align 8, !dbg !53, !noundef !13
  store ptr %5, ptr %end, align 8, !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !63
  br label %bb3, !dbg !44

bb3:                                              ; preds = %bb2, %bb1
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !64
  store ptr %slice.0, ptr %_9, align 8, !dbg !66
  %_11 = load ptr, ptr %end, align 8, !dbg !72, !noundef !13
  %6 = load ptr, ptr %_9, align 8, !dbg !73, !nonnull !13, !noundef !13
  %7 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !73
  store ptr %6, ptr %7, align 8, !dbg !73
  store ptr %_11, ptr %2, align 8, !dbg !73
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !74
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !75
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !76
  %9 = load ptr, ptr %8, align 8, !dbg !76, !noundef !13
  %10 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !76
  %11 = load ptr, ptr %10, align 8, !dbg !76, !nonnull !13, !noundef !13
  %12 = insertvalue { ptr, ptr } undef, ptr %9, 0, !dbg !76
  %13 = insertvalue { ptr, ptr } %12, ptr %11, 1, !dbg !76
  ret { ptr, ptr } %13, !dbg !76
}
*** IR Dump After SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !36
  store ptr %3, ptr %end, align 8, !dbg !36
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !43
  store ptr %slice.0, ptr %_9, align 8, !dbg !45
  %_11 = load ptr, ptr %end, align 8, !dbg !51, !noundef !13
  %4 = load ptr, ptr %_9, align 8, !dbg !52, !nonnull !13, !noundef !13
  %5 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !52
  store ptr %4, ptr %5, align 8, !dbg !52
  store ptr %_11, ptr %2, align 8, !dbg !52
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !54
  %6 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !55
  %7 = load ptr, ptr %6, align 8, !dbg !55, !noundef !13
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !55
  %9 = load ptr, ptr %8, align 8, !dbg !55, !nonnull !13, !noundef !13
  %10 = insertvalue { ptr, ptr } undef, ptr %7, 0, !dbg !55
  %11 = insertvalue { ptr, ptr } %10, ptr %9, 1, !dbg !55
  ret { ptr, ptr } %11, !dbg !55
}
*** IR Dump Before SROAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca i64, align 8
  %_25 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_24 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_14 = alloca ptr, align 8
  %_9 = alloca ptr, align 8
  %end = alloca ptr, align 8
  %2 = alloca { ptr, ptr }, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %_14), !dbg !14
  store ptr %slice.0, ptr %_14, align 8, !dbg !14
  %ptr = load ptr, ptr %_14, align 8, !dbg !24, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !25
  store ptr %ptr, ptr %1, align 8, !dbg !25
  %_17 = load i64, ptr %1, align 8, !dbg !25, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !25
  %_4 = icmp eq i64 %_17, 0, !dbg !31
  call void @llvm.lifetime.end.p0(i64 8, ptr %_14), !dbg !32
  %_3 = xor i1 %_4, true, !dbg !33
  call void @llvm.assume(i1 %_3), !dbg !34
  call void @llvm.lifetime.start.p0(i64 8, ptr %end), !dbg !35
  %3 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !36
  store ptr %3, ptr %end, align 8, !dbg !36
  call void @llvm.lifetime.start.p0(i64 8, ptr %_9), !dbg !43
  store ptr %slice.0, ptr %_9, align 8, !dbg !45
  %_11 = load ptr, ptr %end, align 8, !dbg !51, !noundef !13
  %4 = load ptr, ptr %_9, align 8, !dbg !52, !nonnull !13, !noundef !13
  %5 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !52
  store ptr %4, ptr %5, align 8, !dbg !52
  store ptr %_11, ptr %2, align 8, !dbg !52
  call void @llvm.lifetime.end.p0(i64 8, ptr %_9), !dbg !53
  call void @llvm.lifetime.end.p0(i64 8, ptr %end), !dbg !54
  %6 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 0, !dbg !55
  %7 = load ptr, ptr %6, align 8, !dbg !55, !noundef !13
  %8 = getelementptr inbounds { ptr, ptr }, ptr %2, i32 0, i32 1, !dbg !55
  %9 = load ptr, ptr %8, align 8, !dbg !55, !nonnull !13, !noundef !13
  %10 = insertvalue { ptr, ptr } undef, ptr %7, 0, !dbg !55
  %11 = insertvalue { ptr, ptr } %10, ptr %9, 1, !dbg !55
  ret { ptr, ptr } %11, !dbg !55
}
*** IR Dump After SROAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %_4 = icmp eq i64 %0, 0, !dbg !30
  %_3 = xor i1 %_4, true, !dbg !31
  call void @llvm.assume(i1 %_3), !dbg !32
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !33
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !40
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !40
  ret { ptr, ptr } %3, !dbg !40
}
*** IR Dump Before EarlyCSEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %_4 = icmp eq i64 %0, 0, !dbg !30
  %_3 = xor i1 %_4, true, !dbg !31
  call void @llvm.assume(i1 %_3), !dbg !32
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !33
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !40
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !40
  ret { ptr, ptr } %3, !dbg !40
}
*** IR Dump After EarlyCSEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}
*** IR Dump Before CallSiteSplittingPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}
*** IR Dump After CallSiteSplittingPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}
*** IR Dump Before LowerExpectIntrinsicPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %1, align 8, !dbg !43, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !53
  store ptr %self1, ptr %_11, align 8, !dbg !53
  %ptr = load ptr, ptr %_11, align 8, !dbg !62, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !63
  store ptr %ptr, ptr %0, align 8, !dbg !63
  %_14 = load i64, ptr %0, align 8, !dbg !63, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !63
  %_7 = icmp eq i64 %_14, 0, !dbg !69
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !70
  %_6 = xor i1 %_7, true, !dbg !71
  call void @llvm.assume(i1 %_6), !dbg !72
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !73
  %len = load i64, ptr %2, align 8, !dbg !73, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !74
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !88
  store ptr %self1, ptr %_21, align 8, !dbg !88
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !88
  store i64 %len, ptr %3, align 8, !dbg !88
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !74
  %5 = load ptr, ptr %4, align 8, !dbg !74, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !74
  %7 = load i64, ptr %6, align 8, !dbg !74, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  store ptr %5, ptr %8, align 8, !dbg !74
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  store i64 %7, ptr %9, align 8, !dbg !74
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !89
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  %_16.0 = load ptr, ptr %10, align 8, !dbg !74, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  %_16.1 = load i64, ptr %11, align 8, !dbg !74, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !90
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !91
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !91
  ret { ptr, i64 } %13, !dbg !91
}
*** IR Dump After LowerExpectIntrinsicPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %1, align 8, !dbg !43, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !53
  store ptr %self1, ptr %_11, align 8, !dbg !53
  %ptr = load ptr, ptr %_11, align 8, !dbg !62, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !63
  store ptr %ptr, ptr %0, align 8, !dbg !63
  %_14 = load i64, ptr %0, align 8, !dbg !63, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !63
  %_7 = icmp eq i64 %_14, 0, !dbg !69
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !70
  %_6 = xor i1 %_7, true, !dbg !71
  call void @llvm.assume(i1 %_6), !dbg !72
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !73
  %len = load i64, ptr %2, align 8, !dbg !73, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !74
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !88
  store ptr %self1, ptr %_21, align 8, !dbg !88
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !88
  store i64 %len, ptr %3, align 8, !dbg !88
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !74
  %5 = load ptr, ptr %4, align 8, !dbg !74, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !74
  %7 = load i64, ptr %6, align 8, !dbg !74, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  store ptr %5, ptr %8, align 8, !dbg !74
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  store i64 %7, ptr %9, align 8, !dbg !74
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !89
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  %_16.0 = load ptr, ptr %10, align 8, !dbg !74, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  %_16.1 = load i64, ptr %11, align 8, !dbg !74, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !90
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !91
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !91
  ret { ptr, i64 } %13, !dbg !91
}
*** IR Dump Before SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %1, align 8, !dbg !43, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !53
  store ptr %self1, ptr %_11, align 8, !dbg !53
  %ptr = load ptr, ptr %_11, align 8, !dbg !62, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !63
  store ptr %ptr, ptr %0, align 8, !dbg !63
  %_14 = load i64, ptr %0, align 8, !dbg !63, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !63
  %_7 = icmp eq i64 %_14, 0, !dbg !69
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !70
  %_6 = xor i1 %_7, true, !dbg !71
  call void @llvm.assume(i1 %_6), !dbg !72
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !73
  %len = load i64, ptr %2, align 8, !dbg !73, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !74
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !88
  store ptr %self1, ptr %_21, align 8, !dbg !88
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !88
  store i64 %len, ptr %3, align 8, !dbg !88
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !74
  %5 = load ptr, ptr %4, align 8, !dbg !74, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !74
  %7 = load i64, ptr %6, align 8, !dbg !74, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  store ptr %5, ptr %8, align 8, !dbg !74
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  store i64 %7, ptr %9, align 8, !dbg !74
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !89
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  %_16.0 = load ptr, ptr %10, align 8, !dbg !74, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  %_16.1 = load i64, ptr %11, align 8, !dbg !74, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !90
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !91
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !91
  ret { ptr, i64 } %13, !dbg !91
}
*** IR Dump After SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %1, align 8, !dbg !43, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !53
  store ptr %self1, ptr %_11, align 8, !dbg !53
  %ptr = load ptr, ptr %_11, align 8, !dbg !62, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !63
  store ptr %ptr, ptr %0, align 8, !dbg !63
  %_14 = load i64, ptr %0, align 8, !dbg !63, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !63
  %_7 = icmp eq i64 %_14, 0, !dbg !69
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !70
  %_6 = xor i1 %_7, true, !dbg !71
  call void @llvm.assume(i1 %_6), !dbg !72
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !73
  %len = load i64, ptr %2, align 8, !dbg !73, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !74
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !88
  store ptr %self1, ptr %_21, align 8, !dbg !88
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !88
  store i64 %len, ptr %3, align 8, !dbg !88
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !74
  %5 = load ptr, ptr %4, align 8, !dbg !74, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !74
  %7 = load i64, ptr %6, align 8, !dbg !74, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  store ptr %5, ptr %8, align 8, !dbg !74
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  store i64 %7, ptr %9, align 8, !dbg !74
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !89
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  %_16.0 = load ptr, ptr %10, align 8, !dbg !74, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  %_16.1 = load i64, ptr %11, align 8, !dbg !74, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !90
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !91
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !91
  ret { ptr, i64 } %13, !dbg !91
}
*** IR Dump Before SROAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = alloca i64, align 8
  %_21 = alloca { ptr, i64 }, align 8
  %_20 = alloca %"core::ptr::metadata::PtrRepr<[i32]>", align 8
  %_11 = alloca ptr, align 8
  %1 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %1, align 8, !dbg !43, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_11), !dbg !53
  store ptr %self1, ptr %_11, align 8, !dbg !53
  %ptr = load ptr, ptr %_11, align 8, !dbg !62, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !63
  store ptr %ptr, ptr %0, align 8, !dbg !63
  %_14 = load i64, ptr %0, align 8, !dbg !63, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !63
  %_7 = icmp eq i64 %_14, 0, !dbg !69
  call void @llvm.lifetime.end.p0(i64 8, ptr %_11), !dbg !70
  %_6 = xor i1 %_7, true, !dbg !71
  call void @llvm.assume(i1 %_6), !dbg !72
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !73
  %len = load i64, ptr %2, align 8, !dbg !73, !noundef !13
  call void @llvm.lifetime.start.p0(i64 16, ptr %_20), !dbg !74
  call void @llvm.lifetime.start.p0(i64 16, ptr %_21), !dbg !88
  store ptr %self1, ptr %_21, align 8, !dbg !88
  %3 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !88
  store i64 %len, ptr %3, align 8, !dbg !88
  %4 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 0, !dbg !74
  %5 = load ptr, ptr %4, align 8, !dbg !74, !noundef !13
  %6 = getelementptr inbounds { ptr, i64 }, ptr %_21, i32 0, i32 1, !dbg !74
  %7 = load i64, ptr %6, align 8, !dbg !74, !noundef !13
  %8 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  store ptr %5, ptr %8, align 8, !dbg !74
  %9 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  store i64 %7, ptr %9, align 8, !dbg !74
  call void @llvm.lifetime.end.p0(i64 16, ptr %_21), !dbg !89
  %10 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 0, !dbg !74
  %_16.0 = load ptr, ptr %10, align 8, !dbg !74, !noundef !13
  %11 = getelementptr inbounds { ptr, i64 }, ptr %_20, i32 0, i32 1, !dbg !74
  %_16.1 = load i64, ptr %11, align 8, !dbg !74, !noundef !13
  call void @llvm.lifetime.end.p0(i64 16, ptr %_20), !dbg !90
  %12 = insertvalue { ptr, i64 } undef, ptr %_16.0, 0, !dbg !91
  %13 = insertvalue { ptr, i64 } %12, i64 %_16.1, 1, !dbg !91
  ret { ptr, i64 } %13, !dbg !91
}
*** IR Dump After SROAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %_7 = icmp eq i64 %1, 0, !dbg !68
  %_6 = xor i1 %_7, true, !dbg !69
  call void @llvm.assume(i1 %_6), !dbg !70
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !71
  %len = load i64, ptr %2, align 8, !dbg !71, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !72
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !72
  ret { ptr, i64 } %4, !dbg !72
}
*** IR Dump Before EarlyCSEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %_7 = icmp eq i64 %1, 0, !dbg !68
  %_6 = xor i1 %_7, true, !dbg !69
  call void @llvm.assume(i1 %_6), !dbg !70
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !71
  %len = load i64, ptr %2, align 8, !dbg !71, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !72
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !72
  ret { ptr, i64 } %4, !dbg !72
}
*** IR Dump After EarlyCSEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}
*** IR Dump Before CallSiteSplittingPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}
*** IR Dump After CallSiteSplittingPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}
*** IR Dump Before LowerExpectIntrinsicPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %5, align 8, !dbg !73, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !75
  store ptr %self1, ptr %_19, align 8, !dbg !75
  %ptr = load ptr, ptr %_19, align 8, !dbg !79, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !80
  store ptr %ptr, ptr %3, align 8, !dbg !80
  %_22 = load i64, ptr %3, align 8, !dbg !80, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !80
  %_3 = icmp eq i64 %_22, 0, !dbg !85
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !86
  %_2 = xor i1 %_3, true, !dbg !87
  call void @llvm.assume(i1 %_2), !dbg !88
  br i1 true, label %bb1, label %bb2, !dbg !89

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !90
  %self4 = load ptr, ptr %6, align 8, !dbg !90, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !90, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !90
  br i1 %_10, label %bb3, label %bb4, !dbg !90

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !91, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !92
  store ptr %self2, ptr %_24, align 8, !dbg !92
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !96, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !97
  store ptr %ptr3, ptr %2, align 8, !dbg !97
  %_27 = load i64, ptr %2, align 8, !dbg !97, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !97
  %_8 = icmp eq i64 %_27, 0, !dbg !102
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !103
  %_7 = xor i1 %_8, true, !dbg !104
  call void @llvm.assume(i1 %_7), !dbg !105
  br label %bb2, !dbg !106

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !107
  br i1 false, label %bb8, label %bb9, !dbg !108

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !111
  br label %bb5, !dbg !112

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !113, !align !114, !noundef !13
  ret ptr %7, !dbg !113

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !115, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !116
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !116
  store ptr %8, ptr %0, align 8, !dbg !116
  %self8 = load ptr, ptr %0, align 8, !dbg !116, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !116
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !124
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !132
  store ptr %self8, ptr %_50, align 8, !dbg !132
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !124
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !133
  %_32 = load ptr, ptr %_49, align 8, !dbg !124, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !134
  store ptr %_32, ptr %self, align 8, !dbg !135
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !136
  %self9 = load ptr, ptr %9, align 8, !dbg !136, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !136
  br label %bb10, !dbg !137

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !138
  %self5 = load ptr, ptr %10, align 8, !dbg !138, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !139
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !141
  %self6 = load ptr, ptr %11, align 8, !dbg !141, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !143
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !143
  store ptr %12, ptr %1, align 8, !dbg !143
  %_55 = load ptr, ptr %1, align 8, !dbg !143, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !143
  store ptr %_55, ptr %_38, align 8, !dbg !150
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !157
  %14 = load ptr, ptr %_38, align 8, !dbg !157, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !157
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !158
  store ptr %self5, ptr %_16, align 8, !dbg !159
  br label %bb10, !dbg !137

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !107, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !160
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !161
  br label %bb5, !dbg !112
}
*** IR Dump After LowerExpectIntrinsicPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %5, align 8, !dbg !73, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !75
  store ptr %self1, ptr %_19, align 8, !dbg !75
  %ptr = load ptr, ptr %_19, align 8, !dbg !79, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !80
  store ptr %ptr, ptr %3, align 8, !dbg !80
  %_22 = load i64, ptr %3, align 8, !dbg !80, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !80
  %_3 = icmp eq i64 %_22, 0, !dbg !85
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !86
  %_2 = xor i1 %_3, true, !dbg !87
  call void @llvm.assume(i1 %_2), !dbg !88
  br i1 true, label %bb1, label %bb2, !dbg !89

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !90
  %self4 = load ptr, ptr %6, align 8, !dbg !90, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !90, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !90
  br i1 %_10, label %bb3, label %bb4, !dbg !90

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !91, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !92
  store ptr %self2, ptr %_24, align 8, !dbg !92
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !96, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !97
  store ptr %ptr3, ptr %2, align 8, !dbg !97
  %_27 = load i64, ptr %2, align 8, !dbg !97, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !97
  %_8 = icmp eq i64 %_27, 0, !dbg !102
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !103
  %_7 = xor i1 %_8, true, !dbg !104
  call void @llvm.assume(i1 %_7), !dbg !105
  br label %bb2, !dbg !106

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !107
  br i1 false, label %bb8, label %bb9, !dbg !108

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !111
  br label %bb5, !dbg !112

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !113, !align !114, !noundef !13
  ret ptr %7, !dbg !113

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !115, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !116
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !116
  store ptr %8, ptr %0, align 8, !dbg !116
  %self8 = load ptr, ptr %0, align 8, !dbg !116, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !116
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !124
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !132
  store ptr %self8, ptr %_50, align 8, !dbg !132
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !124
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !133
  %_32 = load ptr, ptr %_49, align 8, !dbg !124, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !134
  store ptr %_32, ptr %self, align 8, !dbg !135
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !136
  %self9 = load ptr, ptr %9, align 8, !dbg !136, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !136
  br label %bb10, !dbg !137

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !138
  %self5 = load ptr, ptr %10, align 8, !dbg !138, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !139
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !141
  %self6 = load ptr, ptr %11, align 8, !dbg !141, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !143
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !143
  store ptr %12, ptr %1, align 8, !dbg !143
  %_55 = load ptr, ptr %1, align 8, !dbg !143, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !143
  store ptr %_55, ptr %_38, align 8, !dbg !150
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !157
  %14 = load ptr, ptr %_38, align 8, !dbg !157, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !157
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !158
  store ptr %self5, ptr %_16, align 8, !dbg !159
  br label %bb10, !dbg !137

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !107, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !160
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !161
  br label %bb5, !dbg !112
}
*** IR Dump Before SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %5, align 8, !dbg !73, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !75
  store ptr %self1, ptr %_19, align 8, !dbg !75
  %ptr = load ptr, ptr %_19, align 8, !dbg !79, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !80
  store ptr %ptr, ptr %3, align 8, !dbg !80
  %_22 = load i64, ptr %3, align 8, !dbg !80, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !80
  %_3 = icmp eq i64 %_22, 0, !dbg !85
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !86
  %_2 = xor i1 %_3, true, !dbg !87
  call void @llvm.assume(i1 %_2), !dbg !88
  br i1 true, label %bb1, label %bb2, !dbg !89

bb2:                                              ; preds = %bb1, %start
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !90
  %self4 = load ptr, ptr %6, align 8, !dbg !90, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !90, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !90
  br i1 %_10, label %bb3, label %bb4, !dbg !90

bb1:                                              ; preds = %start
  %self2 = load ptr, ptr %self, align 8, !dbg !91, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !92
  store ptr %self2, ptr %_24, align 8, !dbg !92
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !96, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !97
  store ptr %ptr3, ptr %2, align 8, !dbg !97
  %_27 = load i64, ptr %2, align 8, !dbg !97, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !97
  %_8 = icmp eq i64 %_27, 0, !dbg !102
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !103
  %_7 = xor i1 %_8, true, !dbg !104
  call void @llvm.assume(i1 %_7), !dbg !105
  br label %bb2, !dbg !106

bb4:                                              ; preds = %bb2
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !107
  br i1 false, label %bb8, label %bb9, !dbg !108

bb3:                                              ; preds = %bb2
  store ptr null, ptr %4, align 8, !dbg !111
  br label %bb5, !dbg !112

bb5:                                              ; preds = %bb10, %bb3
  %7 = load ptr, ptr %4, align 8, !dbg !113, !align !114, !noundef !13
  ret ptr %7, !dbg !113

bb8:                                              ; preds = %bb4
  %self7 = load ptr, ptr %self, align 8, !dbg !115, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %0), !dbg !116
  %8 = getelementptr i8, ptr %self7, i64 -1, !dbg !116
  store ptr %8, ptr %0, align 8, !dbg !116
  %self8 = load ptr, ptr %0, align 8, !dbg !116, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %0), !dbg !116
  call void @llvm.lifetime.start.p0(i64 8, ptr %_49), !dbg !124
  call void @llvm.lifetime.start.p0(i64 8, ptr %_50), !dbg !132
  store ptr %self8, ptr %_50, align 8, !dbg !132
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_49, ptr align 8 %_50, i64 8, i1 false), !dbg !124
  call void @llvm.lifetime.end.p0(i64 8, ptr %_50), !dbg !133
  %_32 = load ptr, ptr %_49, align 8, !dbg !124, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %_49), !dbg !134
  store ptr %_32, ptr %self, align 8, !dbg !135
  %9 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !136
  %self9 = load ptr, ptr %9, align 8, !dbg !136, !nonnull !13, !noundef !13
  store ptr %self9, ptr %_16, align 8, !dbg !136
  br label %bb10, !dbg !137

bb9:                                              ; preds = %bb4
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !138
  %self5 = load ptr, ptr %10, align 8, !dbg !138, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !139
  %11 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !141
  %self6 = load ptr, ptr %11, align 8, !dbg !141, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !143
  %12 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !143
  store ptr %12, ptr %1, align 8, !dbg !143
  %_55 = load ptr, ptr %1, align 8, !dbg !143, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !143
  store ptr %_55, ptr %_38, align 8, !dbg !150
  %13 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !157
  %14 = load ptr, ptr %_38, align 8, !dbg !157, !nonnull !13, !noundef !13
  store ptr %14, ptr %13, align 8, !dbg !157
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !158
  store ptr %self5, ptr %_16, align 8, !dbg !159
  br label %bb10, !dbg !137

bb10:                                             ; preds = %bb8, %bb9
  %_15 = load ptr, ptr %_16, align 8, !dbg !107, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !160
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !161
  br label %bb5, !dbg !112
}
*** IR Dump After SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %5, align 8, !dbg !73, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !75
  store ptr %self1, ptr %_19, align 8, !dbg !75
  %ptr = load ptr, ptr %_19, align 8, !dbg !79, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !80
  store ptr %ptr, ptr %3, align 8, !dbg !80
  %_22 = load i64, ptr %3, align 8, !dbg !80, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !80
  %_3 = icmp eq i64 %_22, 0, !dbg !85
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !86
  %_2 = xor i1 %_3, true, !dbg !87
  call void @llvm.assume(i1 %_2), !dbg !88
  %self2 = load ptr, ptr %self, align 8, !dbg !89, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !90
  store ptr %self2, ptr %_24, align 8, !dbg !90
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !94, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !95
  store ptr %ptr3, ptr %2, align 8, !dbg !95
  %_27 = load i64, ptr %2, align 8, !dbg !95, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !95
  %_8 = icmp eq i64 %_27, 0, !dbg !100
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !101
  %_7 = xor i1 %_8, true, !dbg !102
  call void @llvm.assume(i1 %_7), !dbg !103
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !104
  %self4 = load ptr, ptr %6, align 8, !dbg !104, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !104, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !104
  br i1 %_10, label %bb3, label %bb4, !dbg !104

bb4:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !105
  %7 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !106
  %self5 = load ptr, ptr %7, align 8, !dbg !106, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !109
  %8 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !111
  %self6 = load ptr, ptr %8, align 8, !dbg !111, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !113
  %9 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !113
  store ptr %9, ptr %1, align 8, !dbg !113
  %_55 = load ptr, ptr %1, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !113
  store ptr %_55, ptr %_38, align 8, !dbg !120
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !127
  %11 = load ptr, ptr %_38, align 8, !dbg !127, !nonnull !13, !noundef !13
  store ptr %11, ptr %10, align 8, !dbg !127
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !128
  store ptr %self5, ptr %_16, align 8, !dbg !129
  %_15 = load ptr, ptr %_16, align 8, !dbg !105, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !130
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !131
  br label %bb5, !dbg !132

bb3:                                              ; preds = %start
  store ptr null, ptr %4, align 8, !dbg !133
  br label %bb5, !dbg !132

bb5:                                              ; preds = %bb4, %bb3
  %12 = load ptr, ptr %4, align 8, !dbg !134, !align !135, !noundef !13
  ret ptr %12, !dbg !134
}
*** IR Dump Before SROAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = alloca ptr, align 8
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %_50 = alloca %"core::ptr::metadata::PtrComponents<i32>", align 8
  %_49 = alloca %"core::ptr::metadata::PtrRepr<i32>", align 8
  %_38 = alloca ptr, align 8
  %_24 = alloca ptr, align 8
  %_19 = alloca ptr, align 8
  %_16 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %5, align 8, !dbg !73, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_19), !dbg !75
  store ptr %self1, ptr %_19, align 8, !dbg !75
  %ptr = load ptr, ptr %_19, align 8, !dbg !79, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %3), !dbg !80
  store ptr %ptr, ptr %3, align 8, !dbg !80
  %_22 = load i64, ptr %3, align 8, !dbg !80, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %3), !dbg !80
  %_3 = icmp eq i64 %_22, 0, !dbg !85
  call void @llvm.lifetime.end.p0(i64 8, ptr %_19), !dbg !86
  %_2 = xor i1 %_3, true, !dbg !87
  call void @llvm.assume(i1 %_2), !dbg !88
  %self2 = load ptr, ptr %self, align 8, !dbg !89, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_24), !dbg !90
  store ptr %self2, ptr %_24, align 8, !dbg !90
  %ptr3 = load ptr, ptr %_24, align 8, !dbg !94, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %2), !dbg !95
  store ptr %ptr3, ptr %2, align 8, !dbg !95
  %_27 = load i64, ptr %2, align 8, !dbg !95, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %2), !dbg !95
  %_8 = icmp eq i64 %_27, 0, !dbg !100
  call void @llvm.lifetime.end.p0(i64 8, ptr %_24), !dbg !101
  %_7 = xor i1 %_8, true, !dbg !102
  call void @llvm.assume(i1 %_7), !dbg !103
  %6 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !104
  %self4 = load ptr, ptr %6, align 8, !dbg !104, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !104, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !104
  br i1 %_10, label %bb3, label %bb4, !dbg !104

bb4:                                              ; preds = %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_16), !dbg !105
  %7 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !106
  %self5 = load ptr, ptr %7, align 8, !dbg !106, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %_38), !dbg !109
  %8 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !111
  %self6 = load ptr, ptr %8, align 8, !dbg !111, !nonnull !13, !noundef !13
  call void @llvm.lifetime.start.p0(i64 8, ptr %1), !dbg !113
  %9 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !113
  store ptr %9, ptr %1, align 8, !dbg !113
  %_55 = load ptr, ptr %1, align 8, !dbg !113, !noundef !13
  call void @llvm.lifetime.end.p0(i64 8, ptr %1), !dbg !113
  store ptr %_55, ptr %_38, align 8, !dbg !120
  %10 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !127
  %11 = load ptr, ptr %_38, align 8, !dbg !127, !nonnull !13, !noundef !13
  store ptr %11, ptr %10, align 8, !dbg !127
  call void @llvm.lifetime.end.p0(i64 8, ptr %_38), !dbg !128
  store ptr %self5, ptr %_16, align 8, !dbg !129
  %_15 = load ptr, ptr %_16, align 8, !dbg !105, !noundef !13
  store ptr %_15, ptr %4, align 8, !dbg !130
  call void @llvm.lifetime.end.p0(i64 8, ptr %_16), !dbg !131
  br label %bb5, !dbg !132

bb3:                                              ; preds = %start
  store ptr null, ptr %4, align 8, !dbg !133
  br label %bb5, !dbg !132

bb5:                                              ; preds = %bb4, %bb3
  %12 = load ptr, ptr %4, align 8, !dbg !134, !align !135, !noundef !13
  ret ptr %12, !dbg !134
}
*** IR Dump After SROAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %_3 = icmp eq i64 %1, 0, !dbg !84
  %_2 = xor i1 %_3, true, !dbg !85
  call void @llvm.assume(i1 %_2), !dbg !86
  %self2 = load ptr, ptr %self, align 8, !dbg !87, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !88
  %_8 = icmp eq i64 %2, 0, !dbg !97
  %_7 = xor i1 %_8, true, !dbg !98
  call void @llvm.assume(i1 %_7), !dbg !99
  %3 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !100
  %self4 = load ptr, ptr %3, align 8, !dbg !100, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !100, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !100
  br i1 %_10, label %bb3, label %bb4, !dbg !100

bb4:                                              ; preds = %start
  %4 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !101
  %self5 = load ptr, ptr %4, align 8, !dbg !101, !nonnull !13, !noundef !13
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !104
  %self6 = load ptr, ptr %5, align 8, !dbg !104, !nonnull !13, !noundef !13
  %6 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !107
  %7 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !114
  store ptr %6, ptr %7, align 8, !dbg !114
  br label %bb5, !dbg !115

bb3:                                              ; preds = %start
  br label %bb5, !dbg !115

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self5, %bb4 ], !dbg !116
  ret ptr %.0, !dbg !117
}
*** IR Dump Before EarlyCSEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %_3 = icmp eq i64 %1, 0, !dbg !84
  %_2 = xor i1 %_3, true, !dbg !85
  call void @llvm.assume(i1 %_2), !dbg !86
  %self2 = load ptr, ptr %self, align 8, !dbg !87, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !88
  %_8 = icmp eq i64 %2, 0, !dbg !97
  %_7 = xor i1 %_8, true, !dbg !98
  call void @llvm.assume(i1 %_7), !dbg !99
  %3 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !100
  %self4 = load ptr, ptr %3, align 8, !dbg !100, !nonnull !13, !noundef !13
  %_14 = load ptr, ptr %self, align 8, !dbg !100, !noundef !13
  %_10 = icmp eq ptr %self4, %_14, !dbg !100
  br i1 %_10, label %bb3, label %bb4, !dbg !100

bb4:                                              ; preds = %start
  %4 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !101
  %self5 = load ptr, ptr %4, align 8, !dbg !101, !nonnull !13, !noundef !13
  %5 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !104
  %self6 = load ptr, ptr %5, align 8, !dbg !104, !nonnull !13, !noundef !13
  %6 = getelementptr inbounds i32, ptr %self6, i64 1, !dbg !107
  %7 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !114
  store ptr %6, ptr %7, align 8, !dbg !114
  br label %bb5, !dbg !115

bb3:                                              ; preds = %start
  br label %bb5, !dbg !115

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self5, %bb4 ], !dbg !116
  ret ptr %.0, !dbg !117
}
*** IR Dump After EarlyCSEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}
*** IR Dump Before CallSiteSplittingPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}
*** IR Dump After CallSiteSplittingPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}
*** IR Dump Before LowerExpectIntrinsicPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !121
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !121
  ret { ptr, ptr } %5, !dbg !121
}
*** IR Dump After LowerExpectIntrinsicPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !121
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !121
  ret { ptr, ptr } %5, !dbg !121
}
*** IR Dump Before SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !121
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !121
  ret { ptr, ptr } %5, !dbg !121
}
*** IR Dump After SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !121
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !121
  ret { ptr, ptr } %5, !dbg !121
}
*** IR Dump Before SROAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !121
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !121
  ret { ptr, ptr } %5, !dbg !121
}
*** IR Dump After SROAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !121
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !121
  ret { ptr, ptr } %5, !dbg !121
}
*** IR Dump Before EarlyCSEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  %4 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !121
  %5 = insertvalue { ptr, ptr } %4, ptr %3, 1, !dbg !121
  ret { ptr, ptr } %5, !dbg !121
}
*** IR Dump After EarlyCSEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}
*** IR Dump Before CallSiteSplittingPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}
*** IR Dump After CallSiteSplittingPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}
*** IR Dump Before LowerExpectIntrinsicPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump After LowerExpectIntrinsicPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump Before SROAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump After SROAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump Before EarlyCSEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump After EarlyCSEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump Before CallSiteSplittingPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump After CallSiteSplittingPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump Before LowerExpectIntrinsicPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !128
  store i32 3, ptr %s, align 4, !dbg !129
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !130
  store i32 3, ptr %d, align 4, !dbg !132
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !133
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !133
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !133
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !133
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !133
  store ptr %_4.0, ptr %1, align 8, !dbg !133
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !133
  store ptr %_4.1, ptr %2, align 8, !dbg !133
  br label %bb2, !dbg !135

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !137
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !137
  store ptr %3, ptr %_6, align 8, !dbg !137
  %4 = load ptr, ptr %_6, align 8, !dbg !137, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !137
  %6 = icmp eq i64 %5, 0, !dbg !137
  %_8 = select i1 %6, i64 0, i64 1, !dbg !137
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !137

bb5:                                              ; preds = %bb2
  unreachable, !dbg !137

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !138
  %_17 = load i32, ptr %s, align 4, !dbg !139, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !140, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !139
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !141
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !142
  ret i32 %7, !dbg !143

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !144
  %_11 = load i64, ptr %8, align 8, !dbg !144, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !148
  %9 = icmp eq i64 %_10, 0, !dbg !148
  br i1 %9, label %bb7, label %bb8, !dbg !148

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !149, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !150, !noundef !13
  %11 = add i32 %10, %_12, !dbg !150
  store i32 %11, ptr %s, align 4, !dbg !150
  br label %bb9, !dbg !151

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !152, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !152
  %_14 = sdiv i32 %_15, 80, !dbg !152
  %_13 = add i32 3, %_14, !dbg !153
  %12 = load i32, ptr %d, align 4, !dbg !154, !noundef !13
  %13 = add i32 %12, %_13, !dbg !154
  store i32 %13, ptr %d, align 4, !dbg !154
  br label %bb9, !dbg !151

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  br label %bb2, !dbg !135
}
*** IR Dump After LowerExpectIntrinsicPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !128
  store i32 3, ptr %s, align 4, !dbg !129
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !130
  store i32 3, ptr %d, align 4, !dbg !132
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !133
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !133
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !133
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !133
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !133
  store ptr %_4.0, ptr %1, align 8, !dbg !133
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !133
  store ptr %_4.1, ptr %2, align 8, !dbg !133
  br label %bb2, !dbg !135

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !137
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !137
  store ptr %3, ptr %_6, align 8, !dbg !137
  %4 = load ptr, ptr %_6, align 8, !dbg !137, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !137
  %6 = icmp eq i64 %5, 0, !dbg !137
  %_8 = select i1 %6, i64 0, i64 1, !dbg !137
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !137

bb5:                                              ; preds = %bb2
  unreachable, !dbg !137

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !138
  %_17 = load i32, ptr %s, align 4, !dbg !139, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !140, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !139
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !141
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !142
  ret i32 %7, !dbg !143

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !144
  %_11 = load i64, ptr %8, align 8, !dbg !144, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !148
  %9 = icmp eq i64 %_10, 0, !dbg !148
  br i1 %9, label %bb7, label %bb8, !dbg !148

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !149, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !150, !noundef !13
  %11 = add i32 %10, %_12, !dbg !150
  store i32 %11, ptr %s, align 4, !dbg !150
  br label %bb9, !dbg !151

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !152, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !152
  %_14 = sdiv i32 %_15, 80, !dbg !152
  %_13 = add i32 3, %_14, !dbg !153
  %12 = load i32, ptr %d, align 4, !dbg !154, !noundef !13
  %13 = add i32 %12, %_13, !dbg !154
  store i32 %13, ptr %d, align 4, !dbg !154
  br label %bb9, !dbg !151

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  br label %bb2, !dbg !135
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !128
  store i32 3, ptr %s, align 4, !dbg !129
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !130
  store i32 3, ptr %d, align 4, !dbg !132
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !133
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !133
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !133
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !133
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !133
  store ptr %_4.0, ptr %1, align 8, !dbg !133
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !133
  store ptr %_4.1, ptr %2, align 8, !dbg !133
  br label %bb2, !dbg !135

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !137
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !137
  store ptr %3, ptr %_6, align 8, !dbg !137
  %4 = load ptr, ptr %_6, align 8, !dbg !137, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !137
  %6 = icmp eq i64 %5, 0, !dbg !137
  %_8 = select i1 %6, i64 0, i64 1, !dbg !137
  switch i64 %_8, label %bb5 [
    i64 0, label %bb6
    i64 1, label %bb4
  ], !dbg !137

bb5:                                              ; preds = %bb2
  unreachable, !dbg !137

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !138
  %_17 = load i32, ptr %s, align 4, !dbg !139, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !140, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !139
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !141
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !142
  ret i32 %7, !dbg !143

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !144
  %_11 = load i64, ptr %8, align 8, !dbg !144, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !148
  %9 = icmp eq i64 %_10, 0, !dbg !148
  br i1 %9, label %bb7, label %bb8, !dbg !148

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !149, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !150, !noundef !13
  %11 = add i32 %10, %_12, !dbg !150
  store i32 %11, ptr %s, align 4, !dbg !150
  br label %bb9, !dbg !151

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !152, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !152
  %_14 = sdiv i32 %_15, 80, !dbg !152
  %_13 = add i32 3, %_14, !dbg !153
  %12 = load i32, ptr %d, align 4, !dbg !154, !noundef !13
  %13 = add i32 %12, %_13, !dbg !154
  store i32 %13, ptr %d, align 4, !dbg !154
  br label %bb9, !dbg !151

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  br label %bb2, !dbg !135
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !128
  store i32 3, ptr %s, align 4, !dbg !129
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !130
  store i32 3, ptr %d, align 4, !dbg !132
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !133
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !133
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !133
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !133
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !133
  store ptr %_4.0, ptr %1, align 8, !dbg !133
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !133
  store ptr %_4.1, ptr %2, align 8, !dbg !133
  br label %bb2, !dbg !135

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !137
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !137
  store ptr %3, ptr %_6, align 8, !dbg !137
  %4 = load ptr, ptr %_6, align 8, !dbg !137, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !137
  %6 = icmp eq i64 %5, 0, !dbg !137
  br i1 %6, label %bb6, label %bb4, !dbg !137

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !138
  %_17 = load i32, ptr %s, align 4, !dbg !139, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !140, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !139
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !141
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !142
  ret i32 %7, !dbg !143

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !144
  %_11 = load i64, ptr %8, align 8, !dbg !144, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !148
  %9 = icmp eq i64 %_10, 0, !dbg !148
  br i1 %9, label %bb7, label %bb8, !dbg !148

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !149, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !150, !noundef !13
  %11 = add i32 %10, %_12, !dbg !150
  store i32 %11, ptr %s, align 4, !dbg !150
  br label %bb9, !dbg !151

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !152, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !152
  %_14 = sdiv i32 %_15, 80, !dbg !152
  %_13 = add i32 3, %_14, !dbg !153
  %12 = load i32, ptr %d, align 4, !dbg !154, !noundef !13
  %13 = add i32 %12, %_13, !dbg !154
  store i32 %13, ptr %d, align 4, !dbg !154
  br label %bb9, !dbg !151

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  br label %bb2, !dbg !135
}
*** IR Dump Before SROAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %_6 = alloca ptr, align 8
  %iter = alloca { ptr, ptr }, align 8
  %d = alloca i32, align 4
  %s = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %s), !dbg !128
  store i32 3, ptr %s, align 4, !dbg !129
  call void @llvm.lifetime.start.p0(i64 4, ptr %d), !dbg !130
  store i32 3, ptr %d, align 4, !dbg !132
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !133
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !133
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !133
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !133
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !133
  store ptr %_4.0, ptr %1, align 8, !dbg !133
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !133
  store ptr %_4.1, ptr %2, align 8, !dbg !133
  br label %bb2, !dbg !135

bb2:                                              ; preds = %bb9, %start
  call void @llvm.lifetime.start.p0(i64 8, ptr %_6), !dbg !137
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !137
  store ptr %3, ptr %_6, align 8, !dbg !137
  %4 = load ptr, ptr %_6, align 8, !dbg !137, !noundef !13
  %5 = ptrtoint ptr %4 to i64, !dbg !137
  %6 = icmp eq i64 %5, 0, !dbg !137
  br i1 %6, label %bb6, label %bb4, !dbg !137

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !138
  %_17 = load i32, ptr %s, align 4, !dbg !139, !noundef !13
  %_18 = load i32, ptr %d, align 4, !dbg !140, !noundef !13
  %7 = mul i32 %_17, %_18, !dbg !139
  call void @llvm.lifetime.end.p0(i64 4, ptr %d), !dbg !141
  call void @llvm.lifetime.end.p0(i64 4, ptr %s), !dbg !142
  ret i32 %7, !dbg !143

bb4:                                              ; preds = %bb2
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !144
  %_11 = load i64, ptr %8, align 8, !dbg !144, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !148
  %9 = icmp eq i64 %_10, 0, !dbg !148
  br i1 %9, label %bb7, label %bb8, !dbg !148

bb7:                                              ; preds = %bb4
  %_12 = load i32, ptr %s, align 4, !dbg !149, !noundef !13
  %10 = load i32, ptr %s, align 4, !dbg !150, !noundef !13
  %11 = add i32 %10, %_12, !dbg !150
  store i32 %11, ptr %s, align 4, !dbg !150
  br label %bb9, !dbg !151

bb8:                                              ; preds = %bb4
  %_16 = load i32, ptr %d, align 4, !dbg !152, !noundef !13
  %_15 = mul i32 %_16, 23, !dbg !152
  %_14 = sdiv i32 %_15, 80, !dbg !152
  %_13 = add i32 3, %_14, !dbg !153
  %12 = load i32, ptr %d, align 4, !dbg !154, !noundef !13
  %13 = add i32 %12, %_13, !dbg !154
  store i32 %13, ptr %d, align 4, !dbg !154
  br label %bb9, !dbg !151

bb9:                                              ; preds = %bb7, %bb8
  call void @llvm.lifetime.end.p0(i64 8, ptr %_6), !dbg !135
  br label %bb2, !dbg !135
}
*** IR Dump After SROAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !128
  store ptr %_4.0, ptr %1, align 8, !dbg !128
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %2, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %4 = ptrtoint ptr %3 to i64, !dbg !135
  %5 = icmp eq i64 %4, 0, !dbg !135
  br i1 %5, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %6 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %6, !dbg !138

bb4:                                              ; preds = %bb2
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %7, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %8 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %8, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %9 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %10 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}
*** IR Dump Before EarlyCSEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 0, !dbg !128
  store ptr %_4.0, ptr %1, align 8, !dbg !128
  %2 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %2, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %3 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %4 = ptrtoint ptr %3 to i64, !dbg !135
  %5 = icmp eq i64 %4, 0, !dbg !135
  br i1 %5, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %6 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %6, !dbg !138

bb4:                                              ; preds = %bb2
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %7, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %8 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %8, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %9 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %10 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}
*** IR Dump After EarlyCSEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}
*** IR Dump Before CallSiteSplittingPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}
*** IR Dump After CallSiteSplittingPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}
*** IR Dump Before OpenMPOptPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump After OpenMPOptPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump Before IPSCCPPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump After IPSCCPPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump Before CalledValuePropagationPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump After CalledValuePropagationPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump Before GlobalOptPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump Before PromotePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}
*** IR Dump After PromotePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}
*** IR Dump Before PromotePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}
*** IR Dump After PromotePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}
*** IR Dump Before PromotePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}
*** IR Dump After PromotePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}
*** IR Dump Before PromotePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}
*** IR Dump After PromotePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}
*** IR Dump Before PromotePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump After PromotePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}
*** IR Dump Before PromotePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}
*** IR Dump After PromotePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}
*** IR Dump Before DeadArgumentEliminationPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump After DeadArgumentEliminationPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !38 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !43
  %self1 = load ptr, ptr %0, align 8, !dbg !43, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !53
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !68
  %len = load i64, ptr %2, align 8, !dbg !68, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !69
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !69
  ret { ptr, i64 } %4, !dbg !69
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !70 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !73
  %self1 = load ptr, ptr %0, align 8, !dbg !73, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !75
  %self2 = load ptr, ptr %self, align 8, !dbg !84, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !85
  %_8 = icmp eq i64 %2, 0, !dbg !94
  %_7 = xor i1 %_8, true, !dbg !95
  call void @llvm.assume(i1 %_7), !dbg !96
  %_10 = icmp eq ptr %self1, %self2, !dbg !97
  br i1 %_10, label %bb3, label %bb4, !dbg !97

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !98
  store ptr %3, ptr %0, align 8, !dbg !109
  br label %bb5, !dbg !110

bb3:                                              ; preds = %start
  br label %bb5, !dbg !110

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !111
  ret ptr %.0, !dbg !112
}

; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !113 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !115
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !115
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !115
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !116
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !116
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !116
  ret { ptr, ptr } %1, !dbg !121
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !122 {
start:
  %0 = mul i32 %v, %v, !dbg !125
  ret i32 %0, !dbg !126
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !127 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !128
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !128
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !128
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !128
  store ptr %_4.0, ptr %iter, align 8, !dbg !128
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !128
  store ptr %_4.1, ptr %1, align 8, !dbg !128
  br label %bb2, !dbg !131

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !133
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !134
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !135
  %3 = ptrtoint ptr %2 to i64, !dbg !135
  %4 = icmp eq i64 %3, 0, !dbg !135
  br i1 %4, label %bb6, label %bb4, !dbg !135

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !136
  %5 = mul i32 %s.0, %d.0, !dbg !137
  ret i32 %5, !dbg !138

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !139
  %_11 = load i64, ptr %6, align 8, !dbg !139, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !143
  %7 = icmp eq i64 %_10, 0, !dbg !143
  br i1 %7, label %bb7, label %bb8, !dbg !143

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !144
  br label %bb9, !dbg !145

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !146
  %_14 = sdiv i32 %_15, 80, !dbg !146
  %_13 = add i32 3, %_14, !dbg !147
  %9 = add i32 %d.0, %_13, !dbg !148
  br label %bb9, !dbg !145

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !149
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !134
  br label %bb2, !dbg !131
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 207, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 207, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 37, column: 17, scope: !22, inlinedAt: !24)
!22 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!23 = !DINamespace(name: "is_null", scope: !18)
!24 = !DILocation(line: 51, column: 18, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlock(scope: !26, file: !16, line: 51, column: 9)
!26 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!27 = !DILocation(line: 88, column: 25, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !7, line: 87, column: 9)
!29 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!30 = !DILocation(line: 465, column: 18, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlock(scope: !32, file: !16, line: 465, column: 9)
!32 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!33 = !DILocation(line: 920, column: 23, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlock(scope: !35, file: !16, line: 920, column: 9)
!35 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!36 = !DILocation(line: 91, column: 80, scope: !28)
!37 = !DILocation(line: 95, column: 6, scope: !6)
!38 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !40, file: !39, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!39 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!40 = !DINamespace(name: "{impl#9}", scope: !41)
!41 = !DINamespace(name: "vec", scope: !42)
!42 = !DINamespace(name: "alloc", scope: null)
!43 = !DILocation(line: 224, column: 9, scope: !44, inlinedAt: !48)
!44 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !46, file: !45, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!45 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!46 = !DINamespace(name: "RawVec", scope: !47)
!47 = !DINamespace(name: "raw_vec", scope: !42)
!48 = !DILocation(line: 1243, column: 28, scope: !49, inlinedAt: !51)
!49 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !50, file: !39, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!50 = !DINamespace(name: "Vec", scope: !41)
!51 = !DILocation(line: 2637, column: 45, scope: !52)
!52 = distinct !DILexicalBlock(scope: !38, file: !39, line: 2637, column: 9)
!53 = !DILocation(line: 213, column: 18, scope: !54, inlinedAt: !59)
!54 = distinct !DILexicalBlock(scope: !56, file: !55, line: 213, column: 9)
!55 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!56 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!57 = !DINamespace(name: "{impl#0}", scope: !58)
!58 = !DINamespace(name: "mut_ptr", scope: !20)
!59 = !DILocation(line: 36, column: 17, scope: !60, inlinedAt: !62)
!60 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DINamespace(name: "is_null", scope: !57)
!62 = !DILocation(line: 50, column: 18, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !55, line: 50, column: 9)
!64 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 1245, column: 25, scope: !66, inlinedAt: !51)
!66 = distinct !DILexicalBlock(scope: !67, file: !39, line: 1244, column: 9)
!67 = distinct !DILexicalBlock(scope: !49, file: !39, line: 1243, column: 9)
!68 = !DILocation(line: 2637, column: 55, scope: !52)
!69 = !DILocation(line: 2638, column: 6, scope: !38)
!70 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !72, file: !71, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!72 = !DINamespace(name: "{impl#181}", scope: !9)
!73 = !DILocation(line: 132, column: 29, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !71, line: 131, column: 17)
!75 = !DILocation(line: 213, column: 18, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlock(scope: !77, file: !55, line: 213, column: 9)
!77 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4addr17hdf82084707476bdfE", scope: !57, file: !55, line: 209, type: !12, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!78 = !DILocation(line: 36, column: 17, scope: !79, inlinedAt: !80)
!79 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null12runtime_impl17hff1e2c945dde3ef0E", scope: !61, file: !55, line: 35, type: !12, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DILocation(line: 50, column: 18, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlock(scope: !82, file: !55, line: 50, column: 9)
!82 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h8439f2c8e00dd5d7E", scope: !57, file: !55, line: 33, type: !12, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!83 = !DILocation(line: 132, column: 47, scope: !74)
!84 = !DILocation(line: 134, column: 33, scope: !74)
!85 = !DILocation(line: 207, column: 18, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlock(scope: !87, file: !16, line: 207, column: 9)
!87 = distinct !DISubprogram(name: "addr<u8>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4addr17hbe319bbfe7814ae3E", scope: !18, file: !16, line: 203, type: !12, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!88 = !DILocation(line: 37, column: 17, scope: !89, inlinedAt: !90)
!89 = distinct !DISubprogram(name: "runtime_impl", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null12runtime_impl17hb5f1d7a2d773e57dE", scope: !23, file: !16, line: 36, type: !12, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!90 = !DILocation(line: 51, column: 18, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlock(scope: !92, file: !16, line: 51, column: 9)
!92 = distinct !DISubprogram(name: "is_null<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hd92e264a78d1bf9bE", scope: !18, file: !16, line: 34, type: !12, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!93 = !DILocation(line: 134, column: 42, scope: !74)
!94 = !DILocation(line: 37, column: 13, scope: !89, inlinedAt: !90)
!95 = !DILocation(line: 134, column: 32, scope: !74)
!96 = !DILocation(line: 134, column: 25, scope: !74)
!97 = !DILocation(line: 136, column: 24, scope: !74)
!98 = !DILocation(line: 479, column: 18, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlock(scope: !100, file: !55, line: 479, column: 9)
!100 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !57, file: !55, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!101 = !DILocation(line: 1020, column: 23, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlock(scope: !103, file: !55, line: 1020, column: 9)
!103 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !57, file: !55, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!104 = !DILocation(line: 83, column: 82, scope: !105, inlinedAt: !108)
!105 = distinct !DILexicalBlock(scope: !106, file: !71, line: 83, column: 32)
!106 = distinct !DILexicalBlock(scope: !107, file: !71, line: 80, column: 21)
!107 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !71, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!108 = !DILocation(line: 43, column: 53, scope: !74)
!109 = !DILocation(line: 83, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 136, column: 21, scope: !74)
!111 = !DILocation(line: 0, scope: !74)
!112 = !DILocation(line: 142, column: 14, scope: !70)
!113 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !114, file: !39, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!114 = !DINamespace(name: "{impl#17}", scope: !41)
!115 = !DILocation(line: 2779, column: 9, scope: !113)
!116 = !DILocation(line: 742, column: 9, scope: !117, inlinedAt: !120)
!117 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !119, file: !118, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!118 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!119 = !DINamespace(name: "{impl#0}", scope: !10)
!120 = !DILocation(line: 2779, column: 14, scope: !113)
!121 = !DILocation(line: 2780, column: 6, scope: !113)
!122 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !124, file: !123, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!123 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!124 = !DINamespace(name: "example", scope: null)
!125 = !DILocation(line: 2, column: 5, scope: !122)
!126 = !DILocation(line: 3, column: 2, scope: !122)
!127 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !124, file: !123, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!128 = !DILocation(line: 8, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !130, file: !123, line: 7, column: 5)
!130 = distinct !DILexicalBlock(scope: !127, file: !123, line: 6, column: 5)
!131 = !DILocation(line: 8, column: 5, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !123, line: 8, column: 5)
!133 = !DILocation(line: 7, column: 17, scope: !130)
!134 = !DILocation(line: 0, scope: !127)
!135 = !DILocation(line: 8, column: 14, scope: !132)
!136 = !DILocation(line: 8, column: 5, scope: !129)
!137 = !DILocation(line: 15, column: 5, scope: !129)
!138 = !DILocation(line: 16, column: 2, scope: !127)
!139 = !DILocation(line: 2062, column: 9, scope: !140, inlinedAt: !141)
!140 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !50, file: !39, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!141 = !DILocation(line: 9, column: 14, scope: !142)
!142 = distinct !DILexicalBlock(scope: !132, file: !123, line: 8, column: 16)
!143 = !DILocation(line: 9, column: 12, scope: !142)
!144 = !DILocation(line: 10, column: 13, scope: !142)
!145 = !DILocation(line: 9, column: 9, scope: !142)
!146 = !DILocation(line: 12, column: 22, scope: !142)
!147 = !DILocation(line: 12, column: 18, scope: !142)
!148 = !DILocation(line: 12, column: 13, scope: !142)
!149 = !DILocation(line: 0, scope: !130)
*** IR Dump Before InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = ptrtoint ptr %slice.0 to i64, !dbg !14
  %1 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !30
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %slice.0, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !37
}
*** IR Dump After InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i32 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !43
  %2 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i32 0, i32 1, !dbg !58
  %len = load i64, ptr %2, align 8, !dbg !58, !noundef !13
  %3 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !59
  %4 = insertvalue { ptr, i64 } %3, i64 %len, 1, !dbg !59
  ret { ptr, i64 } %4, !dbg !59
}
*** IR Dump After InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}
*** IR Dump Before SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}
*** IR Dump After SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}
*** IR Dump Before InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i32 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %1 = ptrtoint ptr %self1 to i64, !dbg !50
  %self2 = load ptr, ptr %self, align 8, !dbg !63, !noundef !13
  %2 = ptrtoint ptr %self2 to i64, !dbg !64
  %_8 = icmp eq i64 %2, 0, !dbg !74
  %_7 = xor i1 %_8, true, !dbg !75
  call void @llvm.assume(i1 %_7), !dbg !76
  %_10 = icmp eq ptr %self1, %self2, !dbg !77
  br i1 %_10, label %bb3, label %bb4, !dbg !77

bb4:                                              ; preds = %start
  %3 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !78
  store ptr %3, ptr %0, align 8, !dbg !89
  br label %bb5, !dbg !90

bb3:                                              ; preds = %start
  br label %bb5, !dbg !90

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !91
  ret ptr %.0, !dbg !92
}
*** IR Dump After InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb3, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb3:                                              ; preds = %start
  br label %bb5, !dbg !67

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !68
  ret ptr %.0, !dbg !69
}
*** IR Dump Before SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb3, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb3:                                              ; preds = %start
  br label %bb5, !dbg !67

bb5:                                              ; preds = %bb4, %bb3
  %.0 = phi ptr [ null, %bb3 ], [ %self1, %bb4 ], !dbg !68
  ret ptr %.0, !dbg !69
}
*** IR Dump After SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb5, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !68
  ret ptr %.0, !dbg !69
}
*** IR Dump Before InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  %2 = extractvalue { ptr, ptr } %1, 0, !dbg !73
  %3 = extractvalue { ptr, ptr } %1, 1, !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}
*** IR Dump After InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}
*** IR Dump Before SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}
*** IR Dump After SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i32 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %iter), !dbg !92
  %3 = ptrtoint ptr %2 to i64, !dbg !92
  %4 = icmp eq i64 %3, 0, !dbg !92
  br i1 %4, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr %iter), !dbg !93
  %5 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %5, !dbg !95

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i32 0, i32 1, !dbg !96
  %_11 = load i64, ptr %6, align 8, !dbg !96, !noundef !13
  %_10 = urem i64 %_11, 2, !dbg !100
  %7 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %7, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %8 = add i32 %s.0, %s.0, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add i32 3, %_14, !dbg !104
  %9 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %9, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %8, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}
*** IR Dump Before RequireAnalysisPass<llvm::GlobalsAA, llvm::Module> on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb5, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !68
  ret ptr %.0, !dbg !69
}

; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 465, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 465, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 920, column: 23, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlock(scope: !23, file: !16, line: 920, column: 9)
!23 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!24 = !DILocation(line: 91, column: 80, scope: !25)
!25 = distinct !DILexicalBlock(scope: !26, file: !7, line: 87, column: 9)
!26 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!27 = !DILocation(line: 95, column: 6, scope: !6)
!28 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !30, file: !29, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!29 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!30 = !DINamespace(name: "{impl#9}", scope: !31)
!31 = !DINamespace(name: "vec", scope: !32)
!32 = !DINamespace(name: "alloc", scope: null)
!33 = !DILocation(line: 224, column: 9, scope: !34, inlinedAt: !38)
!34 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !36, file: !35, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!35 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!36 = !DINamespace(name: "RawVec", scope: !37)
!37 = !DINamespace(name: "raw_vec", scope: !32)
!38 = !DILocation(line: 1243, column: 28, scope: !39, inlinedAt: !41)
!39 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !40, file: !29, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DINamespace(name: "Vec", scope: !31)
!41 = !DILocation(line: 2637, column: 45, scope: !42)
!42 = distinct !DILexicalBlock(scope: !28, file: !29, line: 2637, column: 9)
!43 = !DILocation(line: 2637, column: 55, scope: !42)
!44 = !DILocation(line: 2638, column: 6, scope: !28)
!45 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !47, file: !46, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!46 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!47 = !DINamespace(name: "{impl#181}", scope: !9)
!48 = !DILocation(line: 132, column: 29, scope: !49)
!49 = distinct !DILexicalBlock(scope: !45, file: !46, line: 131, column: 17)
!50 = !DILocation(line: 134, column: 33, scope: !49)
!51 = !DILocation(line: 136, column: 24, scope: !49)
!52 = !DILocation(line: 479, column: 18, scope: !53, inlinedAt: !58)
!53 = distinct !DILexicalBlock(scope: !55, file: !54, line: 479, column: 9)
!54 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!55 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !56, file: !54, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!56 = !DINamespace(name: "{impl#0}", scope: !57)
!57 = !DINamespace(name: "mut_ptr", scope: !20)
!58 = !DILocation(line: 1020, column: 23, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlock(scope: !60, file: !54, line: 1020, column: 9)
!60 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !56, file: !54, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DILocation(line: 83, column: 82, scope: !62, inlinedAt: !65)
!62 = distinct !DILexicalBlock(scope: !63, file: !46, line: 83, column: 32)
!63 = distinct !DILexicalBlock(scope: !64, file: !46, line: 80, column: 21)
!64 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !46, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 43, column: 53, scope: !49)
!66 = !DILocation(line: 83, column: 21, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 136, column: 21, scope: !49)
!68 = !DILocation(line: 0, scope: !49)
!69 = !DILocation(line: 142, column: 14, scope: !45)
!70 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !71, file: !29, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DINamespace(name: "{impl#17}", scope: !31)
!72 = !DILocation(line: 2779, column: 9, scope: !70)
!73 = !DILocation(line: 742, column: 9, scope: !74, inlinedAt: !77)
!74 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !76, file: !75, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!75 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!76 = !DINamespace(name: "{impl#0}", scope: !10)
!77 = !DILocation(line: 2779, column: 14, scope: !70)
!78 = !DILocation(line: 2780, column: 6, scope: !70)
!79 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !81, file: !80, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!81 = !DINamespace(name: "example", scope: null)
!82 = !DILocation(line: 2, column: 5, scope: !79)
!83 = !DILocation(line: 3, column: 2, scope: !79)
!84 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !81, file: !80, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!85 = !DILocation(line: 8, column: 14, scope: !86)
!86 = distinct !DILexicalBlock(scope: !87, file: !80, line: 7, column: 5)
!87 = distinct !DILexicalBlock(scope: !84, file: !80, line: 6, column: 5)
!88 = !DILocation(line: 8, column: 5, scope: !89)
!89 = distinct !DILexicalBlock(scope: !86, file: !80, line: 8, column: 5)
!90 = !DILocation(line: 7, column: 17, scope: !87)
!91 = !DILocation(line: 0, scope: !84)
!92 = !DILocation(line: 8, column: 14, scope: !89)
!93 = !DILocation(line: 8, column: 5, scope: !86)
!94 = !DILocation(line: 15, column: 5, scope: !86)
!95 = !DILocation(line: 16, column: 2, scope: !84)
!96 = !DILocation(line: 2062, column: 9, scope: !97, inlinedAt: !98)
!97 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !40, file: !29, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!98 = !DILocation(line: 9, column: 14, scope: !99)
!99 = distinct !DILexicalBlock(scope: !89, file: !80, line: 8, column: 16)
!100 = !DILocation(line: 9, column: 12, scope: !99)
!101 = !DILocation(line: 10, column: 13, scope: !99)
!102 = !DILocation(line: 9, column: 9, scope: !99)
!103 = !DILocation(line: 12, column: 22, scope: !99)
!104 = !DILocation(line: 12, column: 18, scope: !99)
!105 = !DILocation(line: 12, column: 13, scope: !99)
!106 = !DILocation(line: 0, scope: !87)
*** IR Dump After RequireAnalysisPass<llvm::GlobalsAA, llvm::Module> on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb5, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !68
  ret ptr %.0, !dbg !69
}

; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 465, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 465, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 920, column: 23, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlock(scope: !23, file: !16, line: 920, column: 9)
!23 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!24 = !DILocation(line: 91, column: 80, scope: !25)
!25 = distinct !DILexicalBlock(scope: !26, file: !7, line: 87, column: 9)
!26 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!27 = !DILocation(line: 95, column: 6, scope: !6)
!28 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !30, file: !29, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!29 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!30 = !DINamespace(name: "{impl#9}", scope: !31)
!31 = !DINamespace(name: "vec", scope: !32)
!32 = !DINamespace(name: "alloc", scope: null)
!33 = !DILocation(line: 224, column: 9, scope: !34, inlinedAt: !38)
!34 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !36, file: !35, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!35 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!36 = !DINamespace(name: "RawVec", scope: !37)
!37 = !DINamespace(name: "raw_vec", scope: !32)
!38 = !DILocation(line: 1243, column: 28, scope: !39, inlinedAt: !41)
!39 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !40, file: !29, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DINamespace(name: "Vec", scope: !31)
!41 = !DILocation(line: 2637, column: 45, scope: !42)
!42 = distinct !DILexicalBlock(scope: !28, file: !29, line: 2637, column: 9)
!43 = !DILocation(line: 2637, column: 55, scope: !42)
!44 = !DILocation(line: 2638, column: 6, scope: !28)
!45 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !47, file: !46, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!46 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!47 = !DINamespace(name: "{impl#181}", scope: !9)
!48 = !DILocation(line: 132, column: 29, scope: !49)
!49 = distinct !DILexicalBlock(scope: !45, file: !46, line: 131, column: 17)
!50 = !DILocation(line: 134, column: 33, scope: !49)
!51 = !DILocation(line: 136, column: 24, scope: !49)
!52 = !DILocation(line: 479, column: 18, scope: !53, inlinedAt: !58)
!53 = distinct !DILexicalBlock(scope: !55, file: !54, line: 479, column: 9)
!54 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!55 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !56, file: !54, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!56 = !DINamespace(name: "{impl#0}", scope: !57)
!57 = !DINamespace(name: "mut_ptr", scope: !20)
!58 = !DILocation(line: 1020, column: 23, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlock(scope: !60, file: !54, line: 1020, column: 9)
!60 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !56, file: !54, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DILocation(line: 83, column: 82, scope: !62, inlinedAt: !65)
!62 = distinct !DILexicalBlock(scope: !63, file: !46, line: 83, column: 32)
!63 = distinct !DILexicalBlock(scope: !64, file: !46, line: 80, column: 21)
!64 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !46, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 43, column: 53, scope: !49)
!66 = !DILocation(line: 83, column: 21, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 136, column: 21, scope: !49)
!68 = !DILocation(line: 0, scope: !49)
!69 = !DILocation(line: 142, column: 14, scope: !45)
!70 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !71, file: !29, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DINamespace(name: "{impl#17}", scope: !31)
!72 = !DILocation(line: 2779, column: 9, scope: !70)
!73 = !DILocation(line: 742, column: 9, scope: !74, inlinedAt: !77)
!74 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !76, file: !75, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!75 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!76 = !DINamespace(name: "{impl#0}", scope: !10)
!77 = !DILocation(line: 2779, column: 14, scope: !70)
!78 = !DILocation(line: 2780, column: 6, scope: !70)
!79 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !81, file: !80, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!81 = !DINamespace(name: "example", scope: null)
!82 = !DILocation(line: 2, column: 5, scope: !79)
!83 = !DILocation(line: 3, column: 2, scope: !79)
!84 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !81, file: !80, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!85 = !DILocation(line: 8, column: 14, scope: !86)
!86 = distinct !DILexicalBlock(scope: !87, file: !80, line: 7, column: 5)
!87 = distinct !DILexicalBlock(scope: !84, file: !80, line: 6, column: 5)
!88 = !DILocation(line: 8, column: 5, scope: !89)
!89 = distinct !DILexicalBlock(scope: !86, file: !80, line: 8, column: 5)
!90 = !DILocation(line: 7, column: 17, scope: !87)
!91 = !DILocation(line: 0, scope: !84)
!92 = !DILocation(line: 8, column: 14, scope: !89)
!93 = !DILocation(line: 8, column: 5, scope: !86)
!94 = !DILocation(line: 15, column: 5, scope: !86)
!95 = !DILocation(line: 16, column: 2, scope: !84)
!96 = !DILocation(line: 2062, column: 9, scope: !97, inlinedAt: !98)
!97 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !40, file: !29, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!98 = !DILocation(line: 9, column: 14, scope: !99)
!99 = distinct !DILexicalBlock(scope: !89, file: !80, line: 8, column: 16)
!100 = !DILocation(line: 9, column: 12, scope: !99)
!101 = !DILocation(line: 10, column: 13, scope: !99)
!102 = !DILocation(line: 9, column: 9, scope: !99)
!103 = !DILocation(line: 12, column: 22, scope: !99)
!104 = !DILocation(line: 12, column: 18, scope: !99)
!105 = !DILocation(line: 12, column: 13, scope: !99)
!106 = !DILocation(line: 0, scope: !87)
*** IR Dump Before InvalidateAnalysisPass<llvm::AAManager> on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InvalidateAnalysisPass<llvm::AAManager> on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}
*** IR Dump Before InvalidateAnalysisPass<llvm::AAManager> on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb5, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !68
  ret ptr %.0, !dbg !69
}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb5, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !68
  ret ptr %.0, !dbg !69
}
*** IR Dump Before InvalidateAnalysisPass<llvm::AAManager> on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}
*** IR Dump Before InvalidateAnalysisPass<llvm::AAManager> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before InvalidateAnalysisPass<llvm::AAManager> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}
*** IR Dump Before RequireAnalysisPass<llvm::ProfileSummaryAnalysis, llvm::Module> on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb5, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !68
  ret ptr %.0, !dbg !69
}

; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 465, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 465, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 920, column: 23, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlock(scope: !23, file: !16, line: 920, column: 9)
!23 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!24 = !DILocation(line: 91, column: 80, scope: !25)
!25 = distinct !DILexicalBlock(scope: !26, file: !7, line: 87, column: 9)
!26 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!27 = !DILocation(line: 95, column: 6, scope: !6)
!28 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !30, file: !29, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!29 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!30 = !DINamespace(name: "{impl#9}", scope: !31)
!31 = !DINamespace(name: "vec", scope: !32)
!32 = !DINamespace(name: "alloc", scope: null)
!33 = !DILocation(line: 224, column: 9, scope: !34, inlinedAt: !38)
!34 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !36, file: !35, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!35 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!36 = !DINamespace(name: "RawVec", scope: !37)
!37 = !DINamespace(name: "raw_vec", scope: !32)
!38 = !DILocation(line: 1243, column: 28, scope: !39, inlinedAt: !41)
!39 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !40, file: !29, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DINamespace(name: "Vec", scope: !31)
!41 = !DILocation(line: 2637, column: 45, scope: !42)
!42 = distinct !DILexicalBlock(scope: !28, file: !29, line: 2637, column: 9)
!43 = !DILocation(line: 2637, column: 55, scope: !42)
!44 = !DILocation(line: 2638, column: 6, scope: !28)
!45 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !47, file: !46, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!46 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!47 = !DINamespace(name: "{impl#181}", scope: !9)
!48 = !DILocation(line: 132, column: 29, scope: !49)
!49 = distinct !DILexicalBlock(scope: !45, file: !46, line: 131, column: 17)
!50 = !DILocation(line: 134, column: 33, scope: !49)
!51 = !DILocation(line: 136, column: 24, scope: !49)
!52 = !DILocation(line: 479, column: 18, scope: !53, inlinedAt: !58)
!53 = distinct !DILexicalBlock(scope: !55, file: !54, line: 479, column: 9)
!54 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!55 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !56, file: !54, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!56 = !DINamespace(name: "{impl#0}", scope: !57)
!57 = !DINamespace(name: "mut_ptr", scope: !20)
!58 = !DILocation(line: 1020, column: 23, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlock(scope: !60, file: !54, line: 1020, column: 9)
!60 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !56, file: !54, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DILocation(line: 83, column: 82, scope: !62, inlinedAt: !65)
!62 = distinct !DILexicalBlock(scope: !63, file: !46, line: 83, column: 32)
!63 = distinct !DILexicalBlock(scope: !64, file: !46, line: 80, column: 21)
!64 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !46, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 43, column: 53, scope: !49)
!66 = !DILocation(line: 83, column: 21, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 136, column: 21, scope: !49)
!68 = !DILocation(line: 0, scope: !49)
!69 = !DILocation(line: 142, column: 14, scope: !45)
!70 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !71, file: !29, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DINamespace(name: "{impl#17}", scope: !31)
!72 = !DILocation(line: 2779, column: 9, scope: !70)
!73 = !DILocation(line: 742, column: 9, scope: !74, inlinedAt: !77)
!74 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !76, file: !75, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!75 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!76 = !DINamespace(name: "{impl#0}", scope: !10)
!77 = !DILocation(line: 2779, column: 14, scope: !70)
!78 = !DILocation(line: 2780, column: 6, scope: !70)
!79 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !81, file: !80, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!81 = !DINamespace(name: "example", scope: null)
!82 = !DILocation(line: 2, column: 5, scope: !79)
!83 = !DILocation(line: 3, column: 2, scope: !79)
!84 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !81, file: !80, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!85 = !DILocation(line: 8, column: 14, scope: !86)
!86 = distinct !DILexicalBlock(scope: !87, file: !80, line: 7, column: 5)
!87 = distinct !DILexicalBlock(scope: !84, file: !80, line: 6, column: 5)
!88 = !DILocation(line: 8, column: 5, scope: !89)
!89 = distinct !DILexicalBlock(scope: !86, file: !80, line: 8, column: 5)
!90 = !DILocation(line: 7, column: 17, scope: !87)
!91 = !DILocation(line: 0, scope: !84)
!92 = !DILocation(line: 8, column: 14, scope: !89)
!93 = !DILocation(line: 8, column: 5, scope: !86)
!94 = !DILocation(line: 15, column: 5, scope: !86)
!95 = !DILocation(line: 16, column: 2, scope: !84)
!96 = !DILocation(line: 2062, column: 9, scope: !97, inlinedAt: !98)
!97 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !40, file: !29, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!98 = !DILocation(line: 9, column: 14, scope: !99)
!99 = distinct !DILexicalBlock(scope: !89, file: !80, line: 8, column: 16)
!100 = !DILocation(line: 9, column: 12, scope: !99)
!101 = !DILocation(line: 10, column: 13, scope: !99)
!102 = !DILocation(line: 9, column: 9, scope: !99)
!103 = !DILocation(line: 12, column: 22, scope: !99)
!104 = !DILocation(line: 12, column: 18, scope: !99)
!105 = !DILocation(line: 12, column: 13, scope: !99)
!106 = !DILocation(line: 0, scope: !87)
*** IR Dump After RequireAnalysisPass<llvm::ProfileSummaryAnalysis, llvm::Module> on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !28 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !33
  %self1 = load ptr, ptr %0, align 8, !dbg !33, !nonnull !13, !noundef !13
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !43
  %len = load i64, ptr %1, align 8, !dbg !43, !noundef !13
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !44
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !44
  ret { ptr, i64 } %3, !dbg !44
}

; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !45 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !48
  %self1 = load ptr, ptr %0, align 8, !dbg !48, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !50, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !51
  br i1 %_10, label %bb5, label %bb4, !dbg !51

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !52
  store ptr %1, ptr %0, align 8, !dbg !66
  br label %bb5, !dbg !67

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !68
  ret ptr %.0, !dbg !69
}

; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !70 {
start:
  %0 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %self), !dbg !72
  %_3.0 = extractvalue { ptr, i64 } %0, 0, !dbg !72
  %_3.1 = extractvalue { ptr, i64 } %0, 1, !dbg !72
  %1 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !73
  ret { ptr, ptr } %1, !dbg !78
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}

; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !84 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %v), !dbg !85
  %_4.0 = extractvalue { ptr, ptr } %0, 0, !dbg !85
  %_4.1 = extractvalue { ptr, ptr } %0, 1, !dbg !85
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !85
  store ptr %_4.0, ptr %iter, align 8, !dbg !85
  %1 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !85
  store ptr %_4.1, ptr %1, align 8, !dbg !85
  br label %bb2, !dbg !88

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !90
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !91
  %2 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !92
  %3 = icmp eq ptr %2, null, !dbg !92
  br i1 %3, label %bb6, label %bb4, !dbg !92

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !93
  %4 = mul i32 %s.0, %d.0, !dbg !94
  ret i32 %4, !dbg !95

bb4:                                              ; preds = %bb2
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !96
  %_11 = load i64, ptr %5, align 8, !dbg !96, !noundef !13
  %_10 = and i64 %_11, 1, !dbg !100
  %6 = icmp eq i64 %_10, 0, !dbg !100
  br i1 %6, label %bb7, label %bb8, !dbg !100

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !101
  br label %bb9, !dbg !102

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !103
  %_14 = sdiv i32 %_15, 80, !dbg !103
  %_13 = add nsw i32 %_14, 3, !dbg !104
  %8 = add i32 %d.0, %_13, !dbg !105
  br label %bb9, !dbg !102

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !106
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !91
  br label %bb2, !dbg !88
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { inlinehint nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !8, file: !7, line: 84, type: !12, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!7 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!8 = !DINamespace(name: "Iter", scope: !9)
!9 = !DINamespace(name: "iter", scope: !10)
!10 = !DINamespace(name: "slice", scope: !11)
!11 = !DINamespace(name: "core", scope: null)
!12 = !DISubroutineType(types: !13)
!13 = !{}
!14 = !DILocation(line: 465, column: 18, scope: !15, inlinedAt: !21)
!15 = distinct !DILexicalBlock(scope: !17, file: !16, line: 465, column: 9)
!16 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!17 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !18, file: !16, line: 460, type: !12, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!18 = !DINamespace(name: "{impl#0}", scope: !19)
!19 = !DINamespace(name: "const_ptr", scope: !20)
!20 = !DINamespace(name: "ptr", scope: !11)
!21 = !DILocation(line: 920, column: 23, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlock(scope: !23, file: !16, line: 920, column: 9)
!23 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !18, file: !16, line: 915, type: !12, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!24 = !DILocation(line: 91, column: 80, scope: !25)
!25 = distinct !DILexicalBlock(scope: !26, file: !7, line: 87, column: 9)
!26 = distinct !DILexicalBlock(scope: !6, file: !7, line: 85, column: 9)
!27 = !DILocation(line: 95, column: 6, scope: !6)
!28 = distinct !DISubprogram(name: "deref<i32, alloc::alloc::Global>", linkageName: "_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE", scope: !30, file: !29, line: 2636, type: !12, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!29 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!30 = !DINamespace(name: "{impl#9}", scope: !31)
!31 = !DINamespace(name: "vec", scope: !32)
!32 = !DINamespace(name: "alloc", scope: null)
!33 = !DILocation(line: 224, column: 9, scope: !34, inlinedAt: !38)
!34 = distinct !DISubprogram(name: "ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h976f8ef6bf12f7e0E", scope: !36, file: !35, line: 223, type: !12, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!35 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/raw_vec.rs", directory: "", checksumkind: CSK_MD5, checksum: "5f14d7883b7b873321d7b8ace574b758")
!36 = !DINamespace(name: "RawVec", scope: !37)
!37 = !DINamespace(name: "raw_vec", scope: !32)
!38 = !DILocation(line: 1243, column: 28, scope: !39, inlinedAt: !41)
!39 = distinct !DISubprogram(name: "as_ptr<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17hb54764838d1ece17E", scope: !40, file: !29, line: 1240, type: !12, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!40 = !DINamespace(name: "Vec", scope: !31)
!41 = !DILocation(line: 2637, column: 45, scope: !42)
!42 = distinct !DILexicalBlock(scope: !28, file: !29, line: 2637, column: 9)
!43 = !DILocation(line: 2637, column: 55, scope: !42)
!44 = !DILocation(line: 2638, column: 6, scope: !28)
!45 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !47, file: !46, line: 124, type: !12, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!46 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!47 = !DINamespace(name: "{impl#181}", scope: !9)
!48 = !DILocation(line: 132, column: 29, scope: !49)
!49 = distinct !DILexicalBlock(scope: !45, file: !46, line: 131, column: 17)
!50 = !DILocation(line: 134, column: 33, scope: !49)
!51 = !DILocation(line: 136, column: 24, scope: !49)
!52 = !DILocation(line: 479, column: 18, scope: !53, inlinedAt: !58)
!53 = distinct !DILexicalBlock(scope: !55, file: !54, line: 479, column: 9)
!54 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!55 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !56, file: !54, line: 472, type: !12, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!56 = !DINamespace(name: "{impl#0}", scope: !57)
!57 = !DINamespace(name: "mut_ptr", scope: !20)
!58 = !DILocation(line: 1020, column: 23, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlock(scope: !60, file: !54, line: 1020, column: 9)
!60 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !56, file: !54, line: 1015, type: !12, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!61 = !DILocation(line: 83, column: 82, scope: !62, inlinedAt: !65)
!62 = distinct !DILexicalBlock(scope: !63, file: !46, line: 83, column: 32)
!63 = distinct !DILexicalBlock(scope: !64, file: !46, line: 80, column: 21)
!64 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !8, file: !46, line: 75, type: !12, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!65 = !DILocation(line: 43, column: 53, scope: !49)
!66 = !DILocation(line: 83, column: 21, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 136, column: 21, scope: !49)
!68 = !DILocation(line: 0, scope: !49)
!69 = !DILocation(line: 142, column: 14, scope: !45)
!70 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !71, file: !29, line: 2778, type: !12, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!71 = !DINamespace(name: "{impl#17}", scope: !31)
!72 = !DILocation(line: 2779, column: 9, scope: !70)
!73 = !DILocation(line: 742, column: 9, scope: !74, inlinedAt: !77)
!74 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !76, file: !75, line: 741, type: !12, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!75 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!76 = !DINamespace(name: "{impl#0}", scope: !10)
!77 = !DILocation(line: 2779, column: 14, scope: !70)
!78 = !DILocation(line: 2780, column: 6, scope: !70)
!79 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !81, file: !80, line: 1, type: !12, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!80 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!81 = !DINamespace(name: "example", scope: null)
!82 = !DILocation(line: 2, column: 5, scope: !79)
!83 = !DILocation(line: 3, column: 2, scope: !79)
!84 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !81, file: !80, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!85 = !DILocation(line: 8, column: 14, scope: !86)
!86 = distinct !DILexicalBlock(scope: !87, file: !80, line: 7, column: 5)
!87 = distinct !DILexicalBlock(scope: !84, file: !80, line: 6, column: 5)
!88 = !DILocation(line: 8, column: 5, scope: !89)
!89 = distinct !DILexicalBlock(scope: !86, file: !80, line: 8, column: 5)
!90 = !DILocation(line: 7, column: 17, scope: !87)
!91 = !DILocation(line: 0, scope: !84)
!92 = !DILocation(line: 8, column: 14, scope: !89)
!93 = !DILocation(line: 8, column: 5, scope: !86)
!94 = !DILocation(line: 15, column: 5, scope: !86)
!95 = !DILocation(line: 16, column: 2, scope: !84)
!96 = !DILocation(line: 2062, column: 9, scope: !97, inlinedAt: !98)
!97 = distinct !DISubprogram(name: "len<i32, alloc::alloc::Global>", linkageName: "_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hb9fc3e975caaadb3E", scope: !40, file: !29, line: 2061, type: !12, scopeLine: 2061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !13, retainedNodes: !13)
!98 = !DILocation(line: 9, column: 14, scope: !99)
!99 = distinct !DILexicalBlock(scope: !89, file: !80, line: 8, column: 16)
!100 = !DILocation(line: 9, column: 12, scope: !99)
!101 = !DILocation(line: 10, column: 13, scope: !99)
!102 = !DILocation(line: 9, column: 9, scope: !99)
!103 = !DILocation(line: 12, column: 22, scope: !99)
!104 = !DILocation(line: 12, column: 18, scope: !99)
!105 = !DILocation(line: 12, column: 13, scope: !99)
!106 = !DILocation(line: 0, scope: !87)
*** IR Dump Before InlinerPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InlinerPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InlinerPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InlinerPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before PostOrderFunctionAttrsPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #1 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After PostOrderFunctionAttrsPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before ArgumentPromotionPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After ArgumentPromotionPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before OpenMPOptCGSCCPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After OpenMPOptCGSCCPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before SROAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SROAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before EarlyCSEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After EarlyCSEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SpeculativeExecutionPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SpeculativeExecutionPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before JumpThreadingPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After JumpThreadingPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before AggressiveInstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After AggressiveInstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before LibCallsShrinkWrapPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After LibCallsShrinkWrapPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before TailCallElimPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After TailCallElimPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before ReassociatePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After ReassociatePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SROAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SROAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before MergedLoadStoreMotionPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After MergedLoadStoreMotionPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before GVNPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After GVNPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SCCPPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SCCPPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before BDCEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After BDCEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before JumpThreadingPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After JumpThreadingPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before ADCEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After ADCEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before MemCpyOptPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After MemCpyOptPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before DSEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After DSEPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before CoroElidePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After CoroElidePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !79 {
start:
  %0 = mul i32 %v, %v, !dbg !82
  ret i32 %0, !dbg !83
}
*** IR Dump Before CoroSplitPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After CoroSplitPass on (_ZN7example3bar17h44b29894c727e317E) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #2 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InlinerPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !13
  %self1 = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !23
  %len = load i64, ptr %1, align 8, !dbg !23, !noundef !12
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !24
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !24
  ret { ptr, i64 } %3, !dbg !24
}
*** IR Dump After InlinerPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !13
  %self1 = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !23
  %len = load i64, ptr %1, align 8, !dbg !23, !noundef !12
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !24
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !24
  ret { ptr, i64 } %3, !dbg !24
}
*** IR Dump Before InlinerPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !13
  %self1 = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !23
  %len = load i64, ptr %1, align 8, !dbg !23, !noundef !12
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !24
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !24
  ret { ptr, i64 } %3, !dbg !24
}
*** IR Dump After InlinerPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !13
  %self1 = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !23
  %len = load i64, ptr %1, align 8, !dbg !23, !noundef !12
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !24
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !24
  ret { ptr, i64 } %3, !dbg !24
}
*** IR Dump Before PostOrderFunctionAttrsPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !13
  %self1 = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !23
  %len = load i64, ptr %1, align 8, !dbg !23, !noundef !12
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !24
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !24
  ret { ptr, i64 } %3, !dbg !24
}
*** IR Dump After PostOrderFunctionAttrsPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !13
  %self1 = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !23
  %len = load i64, ptr %1, align 8, !dbg !23, !noundef !12
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !24
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !24
  ret { ptr, i64 } %3, !dbg !24
}
*** IR Dump Before ArgumentPromotionPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr inbounds { i64, ptr }, ptr %self, i64 0, i32 1, !dbg !13
  %self1 = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %self, i64 0, i32 1, !dbg !23
  %len = load i64, ptr %1, align 8, !dbg !23, !noundef !12
  %2 = insertvalue { ptr, i64 } undef, ptr %self1, 0, !dbg !24
  %3 = insertvalue { ptr, i64 } %2, i64 %len, 1, !dbg !24
  ret { ptr, i64 } %3, !dbg !24
}
*** IR Dump After ArgumentPromotionPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  ret { ptr, i64 } %2, !dbg !13
}
*** IR Dump Before OpenMPOptCGSCCPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  ret { ptr, i64 } %2, !dbg !13
}
*** IR Dump After OpenMPOptCGSCCPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  ret { ptr, i64 } %2, !dbg !13
}
*** IR Dump Before SROAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SROAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before EarlyCSEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After EarlyCSEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before SpeculativeExecutionPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SpeculativeExecutionPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before JumpThreadingPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After JumpThreadingPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before AggressiveInstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After AggressiveInstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before LibCallsShrinkWrapPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After LibCallsShrinkWrapPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before TailCallElimPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After TailCallElimPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before ReassociatePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After ReassociatePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before LoopSimplifyPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After LoopSimplifyPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before LCSSAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After LCSSAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before LoopSimplifyPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After LoopSimplifyPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before LCSSAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After LCSSAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before SROAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SROAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before MergedLoadStoreMotionPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After MergedLoadStoreMotionPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before GVNPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After GVNPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before SCCPPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SCCPPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before BDCEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After BDCEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before JumpThreadingPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After JumpThreadingPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before ADCEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After ADCEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before MemCpyOptPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After MemCpyOptPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before DSEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After DSEPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before LoopSimplifyPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After LoopSimplifyPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before LCSSAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After LCSSAPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before CoroElidePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After CoroElidePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After SimplifyCFGPass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump After InstCombinePass on _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !28 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !33
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !33
  ret { ptr, i64 } %2, !dbg !33
}
*** IR Dump Before CoroSplitPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  ret { ptr, i64 } %2, !dbg !13
}
*** IR Dump After CoroSplitPass on (_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readonly willreturn uwtable
define internal fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  ret { ptr, i64 } %2, !dbg !13
}
*** IR Dump Before InlinerPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After InlinerPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InlinerPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After InlinerPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before PostOrderFunctionAttrsPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After PostOrderFunctionAttrsPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before ArgumentPromotionPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After ArgumentPromotionPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before OpenMPOptCGSCCPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After OpenMPOptCGSCCPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SROAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SROAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before EarlyCSEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After EarlyCSEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SpeculativeExecutionPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SpeculativeExecutionPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before JumpThreadingPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After JumpThreadingPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before AggressiveInstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After AggressiveInstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before LibCallsShrinkWrapPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After LibCallsShrinkWrapPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before TailCallElimPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After TailCallElimPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before ReassociatePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After ReassociatePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before LoopSimplifyPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After LoopSimplifyPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before LCSSAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After LCSSAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before LoopSimplifyPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After LoopSimplifyPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before LCSSAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After LCSSAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SROAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SROAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before MergedLoadStoreMotionPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After MergedLoadStoreMotionPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before GVNPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After GVNPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SCCPPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SCCPPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before BDCEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After BDCEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before JumpThreadingPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After JumpThreadingPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before ADCEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After ADCEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before MemCpyOptPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After MemCpyOptPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before DSEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After DSEPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before LoopSimplifyPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After LoopSimplifyPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before LCSSAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After LCSSAPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before CoroElidePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After CoroElidePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After SimplifyCFGPass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After InstCombinePass on _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before CoroSplitPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump After CoroSplitPass on (_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE) ***
; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %slice.0, i64 noundef %slice.1) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds i32, ptr %slice.0, i64 %slice.1, !dbg !14
  %1 = insertvalue { ptr, ptr } undef, ptr %0, 0, !dbg !27
  %2 = insertvalue { ptr, ptr } %1, ptr %slice.0, 1, !dbg !27
  ret { ptr, ptr } %2, !dbg !27
}
*** IR Dump Before InlinerPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #3 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %self, i64 8, !dbg !13
  %self.val = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr i8, ptr %self, i64 16, !dbg !13
  %self.val1 = load i64, ptr %1, align 8, !dbg !13, !noundef !12
  %2 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.val, i64 %self.val1), !dbg !13
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !13
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !13
  %3 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !14
  ret { ptr, ptr } %3, !dbg !21
}
*** IR Dump After InlinerPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #3 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %self, i64 8, !dbg !13
  %self.val = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr i8, ptr %self, i64 16, !dbg !13
  %self.val1 = load i64, ptr %1, align 8, !dbg !13, !noundef !12
  %2 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.val, i64 %self.val1), !dbg !13
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !13
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !13
  %3 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !14
  ret { ptr, ptr } %3, !dbg !21
}
*** IR Dump Before InlinerPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #3 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %self, i64 8, !dbg !13
  %self.val = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr i8, ptr %self, i64 16, !dbg !13
  %self.val1 = load i64, ptr %1, align 8, !dbg !13, !noundef !12
  %2 = call fastcc { ptr, i64 } @"_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h87f89f4f5a8f2dceE"(ptr %self.val, i64 %self.val1), !dbg !13
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !13
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !13
  %3 = call fastcc { ptr, ptr } @"_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE"(ptr noalias noundef nonnull readonly align 4 %_3.0, i64 noundef %_3.1), !dbg !14
  ret { ptr, ptr } %3, !dbg !21
}
*** IR Dump After InlinerPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %self, i64 8, !dbg !13
  %self.val = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr i8, ptr %self, i64 16, !dbg !13
  %self.val1 = load i64, ptr %1, align 8, !dbg !13, !noundef !12
  call void @llvm.assume(i1 true)
  %2 = insertvalue { ptr, i64 } undef, ptr %self.val, 0, !dbg !14
  %3 = insertvalue { ptr, i64 } %2, i64 %self.val1, 1, !dbg !14
  %_3.0 = extractvalue { ptr, i64 } %3, 0, !dbg !13
  %_3.1 = extractvalue { ptr, i64 } %3, 1, !dbg !13
  call void @llvm.experimental.noalias.scope.decl(metadata !18), !dbg !21
  %4 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !28
  %5 = insertvalue { ptr, ptr } undef, ptr %4, 0, !dbg !46
  %6 = insertvalue { ptr, ptr } %5, ptr %_3.0, 1, !dbg !46
  ret { ptr, ptr } %6, !dbg !47
}
*** IR Dump Before PostOrderFunctionAttrsPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: nonlazybind uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %self, i64 8, !dbg !13
  %self.val = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr i8, ptr %self, i64 16, !dbg !13
  %self.val1 = load i64, ptr %1, align 8, !dbg !13, !noundef !12
  call void @llvm.assume(i1 true)
  %2 = insertvalue { ptr, i64 } undef, ptr %self.val, 0, !dbg !14
  %3 = insertvalue { ptr, i64 } %2, i64 %self.val1, 1, !dbg !14
  %_3.0 = extractvalue { ptr, i64 } %3, 0, !dbg !13
  %_3.1 = extractvalue { ptr, i64 } %3, 1, !dbg !13
  call void @llvm.experimental.noalias.scope.decl(metadata !18), !dbg !21
  %4 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !28
  %5 = insertvalue { ptr, ptr } undef, ptr %4, 0, !dbg !46
  %6 = insertvalue { ptr, ptr } %5, ptr %_3.0, 1, !dbg !46
  ret { ptr, ptr } %6, !dbg !47
}
*** IR Dump After PostOrderFunctionAttrsPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %self, i64 8, !dbg !13
  %self.val = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr i8, ptr %self, i64 16, !dbg !13
  %self.val1 = load i64, ptr %1, align 8, !dbg !13, !noundef !12
  call void @llvm.assume(i1 true)
  %2 = insertvalue { ptr, i64 } undef, ptr %self.val, 0, !dbg !14
  %3 = insertvalue { ptr, i64 } %2, i64 %self.val1, 1, !dbg !14
  %_3.0 = extractvalue { ptr, i64 } %3, 0, !dbg !13
  %_3.1 = extractvalue { ptr, i64 } %3, 1, !dbg !13
  call void @llvm.experimental.noalias.scope.decl(metadata !18), !dbg !21
  %4 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !28
  %5 = insertvalue { ptr, ptr } undef, ptr %4, 0, !dbg !46
  %6 = insertvalue { ptr, ptr } %5, ptr %_3.0, 1, !dbg !46
  ret { ptr, ptr } %6, !dbg !47
}
*** IR Dump Before ArgumentPromotionPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %self, i64 8, !dbg !13
  %self.val = load ptr, ptr %0, align 8, !dbg !13, !nonnull !12, !noundef !12
  %1 = getelementptr i8, ptr %self, i64 16, !dbg !13
  %self.val1 = load i64, ptr %1, align 8, !dbg !13, !noundef !12
  call void @llvm.assume(i1 true)
  %2 = insertvalue { ptr, i64 } undef, ptr %self.val, 0, !dbg !14
  %3 = insertvalue { ptr, i64 } %2, i64 %self.val1, 1, !dbg !14
  %_3.0 = extractvalue { ptr, i64 } %3, 0, !dbg !13
  %_3.1 = extractvalue { ptr, i64 } %3, 1, !dbg !13
  call void @llvm.experimental.noalias.scope.decl(metadata !18), !dbg !21
  %4 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !28
  %5 = insertvalue { ptr, ptr } undef, ptr %4, 0, !dbg !46
  %6 = insertvalue { ptr, ptr } %5, ptr %_3.0, 1, !dbg !46
  ret { ptr, ptr } %6, !dbg !47
}
*** IR Dump After ArgumentPromotionPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  call void @llvm.assume(i1 true)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !17
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !17
  call void @llvm.experimental.noalias.scope.decl(metadata !18), !dbg !21
  %3 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !28
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !46
  %5 = insertvalue { ptr, ptr } %4, ptr %_3.0, 1, !dbg !46
  ret { ptr, ptr } %5, !dbg !47
}
*** IR Dump Before OpenMPOptCGSCCPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  call void @llvm.assume(i1 true)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !17
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !17
  call void @llvm.experimental.noalias.scope.decl(metadata !18), !dbg !21
  %3 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !28
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !46
  %5 = insertvalue { ptr, ptr } %4, ptr %_3.0, 1, !dbg !46
  ret { ptr, ptr } %5, !dbg !47
}
*** IR Dump After OpenMPOptCGSCCPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  call void @llvm.assume(i1 true)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !13
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !13
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !17
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !17
  call void @llvm.experimental.noalias.scope.decl(metadata !18), !dbg !21
  %3 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !28
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !46
  %5 = insertvalue { ptr, ptr } %4, ptr %_3.0, 1, !dbg !46
  ret { ptr, ptr } %5, !dbg !47
}
*** IR Dump Before SROAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  call void @llvm.assume(i1 true)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !47
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !47
  call void @llvm.experimental.noalias.scope.decl(metadata !48), !dbg !51
  %3 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !56
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !71
  %5 = insertvalue { ptr, ptr } %4, ptr %_3.0, 1, !dbg !71
  ret { ptr, ptr } %5, !dbg !72
}
*** IR Dump After SROAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  call void @llvm.assume(i1 true)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !47
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !47
  call void @llvm.experimental.noalias.scope.decl(metadata !48), !dbg !51
  %3 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !56
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !71
  %5 = insertvalue { ptr, ptr } %4, ptr %_3.0, 1, !dbg !71
  ret { ptr, ptr } %5, !dbg !72
}
*** IR Dump Before EarlyCSEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  call void @llvm.assume(i1 true)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  %_3.0 = extractvalue { ptr, i64 } %2, 0, !dbg !47
  %_3.1 = extractvalue { ptr, i64 } %2, 1, !dbg !47
  call void @llvm.experimental.noalias.scope.decl(metadata !48), !dbg !51
  %3 = getelementptr inbounds i32, ptr %_3.0, i64 %_3.1, !dbg !56
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !71
  %5 = insertvalue { ptr, ptr } %4, ptr %_3.0, 1, !dbg !71
  ret { ptr, ptr } %5, !dbg !72
}
*** IR Dump After EarlyCSEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump Before SpeculativeExecutionPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump After SpeculativeExecutionPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump Before JumpThreadingPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump After JumpThreadingPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump Before SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump After SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump Before InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = insertvalue { ptr, i64 } undef, ptr %self.8.val, 0, !dbg !43
  %2 = insertvalue { ptr, i64 } %1, i64 %self.16.val, 1, !dbg !43
  call void @llvm.experimental.noalias.scope.decl(metadata !47), !dbg !50
  %3 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !55
  %4 = insertvalue { ptr, ptr } undef, ptr %3, 0, !dbg !70
  %5 = insertvalue { ptr, ptr } %4, ptr %self.8.val, 1, !dbg !70
  ret { ptr, ptr } %5, !dbg !71
}
*** IR Dump After InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before AggressiveInstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After AggressiveInstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before LibCallsShrinkWrapPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After LibCallsShrinkWrapPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before TailCallElimPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After TailCallElimPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before ReassociatePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After ReassociatePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before LoopSimplifyPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After LoopSimplifyPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before LCSSAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After LCSSAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before LoopSimplifyPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After LoopSimplifyPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before LCSSAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After LCSSAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before SROAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After SROAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before MergedLoadStoreMotionPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After MergedLoadStoreMotionPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before GVNPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After GVNPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before SCCPPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After SCCPPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before BDCEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After BDCEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before JumpThreadingPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After JumpThreadingPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before ADCEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After ADCEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before MemCpyOptPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After MemCpyOptPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before DSEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After DSEPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before LoopSimplifyPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After LoopSimplifyPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before LCSSAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After LCSSAPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before CoroElidePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After CoroElidePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After SimplifyCFGPass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump After InstCombinePass on _ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !38 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !43
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !62
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !62
  ret { ptr, ptr } %3, !dbg !63
}
*** IR Dump Before CoroSplitPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !13
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !38
}
*** IR Dump After CoroSplitPass on (_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E) ***
; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn uwtable
define internal fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %self.8.val, i64 %self.16.val) unnamed_addr #1 !dbg !6 {
start:
  %0 = icmp ne ptr %self.8.val, null
  tail call void @llvm.assume(i1 %0)
  %1 = getelementptr inbounds i32, ptr %self.8.val, i64 %self.16.val, !dbg !13
  %2 = insertvalue { ptr, ptr } undef, ptr %1, 0, !dbg !37
  %3 = insertvalue { ptr, ptr } %2, ptr %self.8.val, 1, !dbg !37
  ret { ptr, ptr } %3, !dbg !38
}
*** IR Dump Before InlinerPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After InlinerPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before InlinerPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After InlinerPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before PostOrderFunctionAttrsPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: inlinehint nonlazybind uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After PostOrderFunctionAttrsPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before ArgumentPromotionPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After ArgumentPromotionPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before OpenMPOptCGSCCPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After OpenMPOptCGSCCPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SROAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SROAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before EarlyCSEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After EarlyCSEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SpeculativeExecutionPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SpeculativeExecutionPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before JumpThreadingPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After JumpThreadingPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before AggressiveInstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After AggressiveInstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before LibCallsShrinkWrapPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After LibCallsShrinkWrapPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before TailCallElimPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After TailCallElimPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before ReassociatePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After ReassociatePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before LoopSimplifyPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After LoopSimplifyPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before LCSSAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After LCSSAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before LoopSimplifyPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After LoopSimplifyPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before LCSSAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After LCSSAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SROAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SROAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before MergedLoadStoreMotionPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After MergedLoadStoreMotionPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before GVNPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After GVNPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SCCPPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SCCPPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before BDCEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After BDCEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before JumpThreadingPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After JumpThreadingPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before ADCEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After ADCEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before MemCpyOptPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After MemCpyOptPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before DSEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After DSEPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before LoopSimplifyPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After LoopSimplifyPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before LCSSAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After LCSSAPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before CoroElidePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After CoroElidePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After SimplifyCFGPass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After InstCombinePass on _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before CoroSplitPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump After CoroSplitPass on (_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E) ***
; Function Attrs: argmemonly inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn uwtable
define internal fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self) unnamed_addr #0 !dbg !6 {
start:
  %0 = getelementptr inbounds { ptr, ptr }, ptr %self, i64 0, i32 1, !dbg !14
  %self1 = load ptr, ptr %0, align 8, !dbg !14, !nonnull !13, !noundef !13
  %self2 = load ptr, ptr %self, align 8, !dbg !16, !nonnull !13, !noundef !13
  %_10 = icmp eq ptr %self1, %self2, !dbg !17
  br i1 %_10, label %bb5, label %bb4, !dbg !17

bb4:                                              ; preds = %start
  %1 = getelementptr inbounds i32, ptr %self1, i64 1, !dbg !18
  store ptr %1, ptr %0, align 8, !dbg !34
  br label %bb5, !dbg !35

bb5:                                              ; preds = %start, %bb4
  %.0 = phi ptr [ %self1, %bb4 ], [ null, %start ], !dbg !36
  ret ptr %.0, !dbg !37
}
*** IR Dump Before InlinerPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #3 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %v.val, i64 %v.val5), !dbg !11
  %_4.0 = extractvalue { ptr, ptr } %2, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %2, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %3 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %3, align 8, !dbg !11
  br label %bb2, !dbg !14

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !16
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !17
  %4 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !18
  %5 = icmp eq ptr %4, null, !dbg !18
  br i1 %5, label %bb6, label %bb4, !dbg !18

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !19
  %6 = mul i32 %s.0, %d.0, !dbg !20
  ret i32 %6, !dbg !21

bb4:                                              ; preds = %bb2
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !22
  %_11 = load i64, ptr %7, align 8, !dbg !22, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !30
  %8 = icmp eq i64 %_10, 0, !dbg !30
  br i1 %8, label %bb7, label %bb8, !dbg !30

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !31
  br label %bb9, !dbg !32

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !33
  %_14 = sdiv i32 %_15, 80, !dbg !33
  %_13 = add nsw i32 %_14, 3, !dbg !34
  %10 = add i32 %d.0, %_13, !dbg !35
  br label %bb9, !dbg !32

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !36
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !17
  br label %bb2, !dbg !14
}
*** IR Dump After InlinerPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #3 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %v.val, i64 %v.val5), !dbg !11
  %_4.0 = extractvalue { ptr, ptr } %2, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %2, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %3 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %3, align 8, !dbg !11
  br label %bb2, !dbg !14

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !16
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !17
  %4 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !18
  %5 = icmp eq ptr %4, null, !dbg !18
  br i1 %5, label %bb6, label %bb4, !dbg !18

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !19
  %6 = mul i32 %s.0, %d.0, !dbg !20
  ret i32 %6, !dbg !21

bb4:                                              ; preds = %bb2
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !22
  %_11 = load i64, ptr %7, align 8, !dbg !22, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !30
  %8 = icmp eq i64 %_10, 0, !dbg !30
  br i1 %8, label %bb7, label %bb8, !dbg !30

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !31
  br label %bb9, !dbg !32

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !33
  %_14 = sdiv i32 %_15, 80, !dbg !33
  %_13 = add nsw i32 %_14, 3, !dbg !34
  %10 = add i32 %d.0, %_13, !dbg !35
  br label %bb9, !dbg !32

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !36
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !17
  br label %bb2, !dbg !14
}
*** IR Dump Before InlinerPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #3 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = call fastcc { ptr, ptr } @"_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E"(ptr %v.val, i64 %v.val5), !dbg !11
  %_4.0 = extractvalue { ptr, ptr } %2, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %2, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %3 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %3, align 8, !dbg !11
  br label %bb2, !dbg !14

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !16
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !17
  %4 = call fastcc noundef align 4 dereferenceable_or_null(4) ptr @"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %iter), !dbg !18
  %5 = icmp eq ptr %4, null, !dbg !18
  br i1 %5, label %bb6, label %bb4, !dbg !18

bb6:                                              ; preds = %bb2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !19
  %6 = mul i32 %s.0, %d.0, !dbg !20
  ret i32 %6, !dbg !21

bb4:                                              ; preds = %bb2
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !22
  %_11 = load i64, ptr %7, align 8, !dbg !22, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !30
  %8 = icmp eq i64 %_10, 0, !dbg !30
  br i1 %8, label %bb7, label %bb8, !dbg !30

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !31
  br label %bb9, !dbg !32

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !33
  %_14 = sdiv i32 %_15, 80, !dbg !33
  %_13 = add nsw i32 %_14, 3, !dbg !34
  %10 = add i32 %d.0, %_13, !dbg !35
  br label %bb9, !dbg !32

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !36
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !17
  br label %bb2, !dbg !14
}
*** IR Dump After InlinerPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !44
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !44
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %5, align 8, !dbg !11
  br label %bb2, !dbg !45

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !47
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !48
  call void @llvm.experimental.noalias.scope.decl(metadata !49), !dbg !52
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !53
  %self1.i = load ptr, ptr %6, align 8, !dbg !53, !alias.scope !49, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !59, !alias.scope !49, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !60
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !60

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !61
  store ptr %7, ptr %6, align 8, !dbg !75, !alias.scope !49
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !77
  %8 = icmp eq ptr %.0.i, null, !dbg !52
  br i1 %8, label %bb6, label %bb4, !dbg !52

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !78
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !48
  br label %bb2, !dbg !45
}
*** IR Dump Before PostOrderFunctionAttrsPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !44
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !44
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %5, align 8, !dbg !11
  br label %bb2, !dbg !45

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !47
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !48
  call void @llvm.experimental.noalias.scope.decl(metadata !49), !dbg !52
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !53
  %self1.i = load ptr, ptr %6, align 8, !dbg !53, !alias.scope !49, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !59, !alias.scope !49, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !60
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !60

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !61
  store ptr %7, ptr %6, align 8, !dbg !75, !alias.scope !49
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !77
  %8 = icmp eq ptr %.0.i, null, !dbg !52
  br i1 %8, label %bb6, label %bb4, !dbg !52

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !78
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !48
  br label %bb2, !dbg !45
}
*** IR Dump After PostOrderFunctionAttrsPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !44
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !44
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %5, align 8, !dbg !11
  br label %bb2, !dbg !45

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !47
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !48
  call void @llvm.experimental.noalias.scope.decl(metadata !49), !dbg !52
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !53
  %self1.i = load ptr, ptr %6, align 8, !dbg !53, !alias.scope !49, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !59, !alias.scope !49, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !60
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !60

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !61
  store ptr %7, ptr %6, align 8, !dbg !75, !alias.scope !49
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !77
  %8 = icmp eq ptr %.0.i, null, !dbg !52
  br i1 %8, label %bb6, label %bb4, !dbg !52

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !78
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !48
  br label %bb2, !dbg !45
}
*** IR Dump Before ArgumentPromotionPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !44
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !44
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %5, align 8, !dbg !11
  br label %bb2, !dbg !45

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !47
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !48
  call void @llvm.experimental.noalias.scope.decl(metadata !49), !dbg !52
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !53
  %self1.i = load ptr, ptr %6, align 8, !dbg !53, !alias.scope !49, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !59, !alias.scope !49, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !60
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !60

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !61
  store ptr %7, ptr %6, align 8, !dbg !75, !alias.scope !49
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !77
  %8 = icmp eq ptr %.0.i, null, !dbg !52
  br i1 %8, label %bb6, label %bb4, !dbg !52

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !78
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !48
  br label %bb2, !dbg !45
}
*** IR Dump After ArgumentPromotionPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !44
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !44
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %5, align 8, !dbg !11
  br label %bb2, !dbg !45

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !47
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !48
  call void @llvm.experimental.noalias.scope.decl(metadata !49), !dbg !52
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !53
  %self1.i = load ptr, ptr %6, align 8, !dbg !53, !alias.scope !49, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !59, !alias.scope !49, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !60
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !60

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !61
  store ptr %7, ptr %6, align 8, !dbg !75, !alias.scope !49
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !77
  %8 = icmp eq ptr %.0.i, null, !dbg !52
  br i1 %8, label %bb6, label %bb4, !dbg !52

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !78
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !48
  br label %bb2, !dbg !45
}
*** IR Dump Before OpenMPOptCGSCCPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !44
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !44
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %5, align 8, !dbg !11
  br label %bb2, !dbg !45

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !47
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !48
  call void @llvm.experimental.noalias.scope.decl(metadata !49), !dbg !52
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !53
  %self1.i = load ptr, ptr %6, align 8, !dbg !53, !alias.scope !49, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !59, !alias.scope !49, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !60
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !60

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !61
  store ptr %7, ptr %6, align 8, !dbg !75, !alias.scope !49
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !77
  %8 = icmp eq ptr %.0.i, null, !dbg !52
  br i1 %8, label %bb6, label %bb4, !dbg !52

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !78
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !48
  br label %bb2, !dbg !45
}
*** IR Dump After OpenMPOptCGSCCPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !44
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !44
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !11
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !11
  store ptr %_4.0, ptr %iter, align 8, !dbg !11
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !11
  store ptr %_4.1, ptr %5, align 8, !dbg !11
  br label %bb2, !dbg !45

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !47
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !48
  call void @llvm.experimental.noalias.scope.decl(metadata !49), !dbg !52
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !53
  %self1.i = load ptr, ptr %6, align 8, !dbg !53, !alias.scope !49, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !59, !alias.scope !49, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !60
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !60

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !61
  store ptr %7, ptr %6, align 8, !dbg !75, !alias.scope !49
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !77
  %8 = icmp eq ptr %.0.i, null, !dbg !52
  br i1 %8, label %bb6, label %bb4, !dbg !52

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !78
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !48
  br label %bb2, !dbg !45
}
*** IR Dump Before SROAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %iter = alloca { ptr, ptr }, align 8
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !14
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !14
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %iter), !dbg !14
  store ptr %_4.0, ptr %iter, align 8, !dbg !14
  %5 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !14
  store ptr %_4.1, ptr %5, align 8, !dbg !14
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %6 = getelementptr inbounds { ptr, ptr }, ptr %iter, i64 0, i32 1, !dbg !56
  %self1.i = load ptr, ptr %6, align 8, !dbg !56, !alias.scope !52, !nonnull !10, !noundef !10
  %self2.i = load ptr, ptr %iter, align 8, !dbg !62, !alias.scope !52, !nonnull !10, !noundef !10
  %_10.i = icmp eq ptr %self1.i, %self2.i, !dbg !63
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !63

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %self1.i, i64 1, !dbg !64
  store ptr %7, ptr %6, align 8, !dbg !78, !alias.scope !52
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !79

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %.0.i = phi ptr [ %self1.i, %bb4.i ], [ null, %bb2 ], !dbg !80
  %8 = icmp eq ptr %.0.i, null, !dbg !55
  br i1 %8, label %bb6, label %bb4, !dbg !55

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %iter), !dbg !81
  %9 = mul i32 %s.0, %d.0, !dbg !82
  ret i32 %9, !dbg !83

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !84
  %_11 = load i64, ptr %10, align 8, !dbg !84, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !89
  %11 = icmp eq i64 %_10, 0, !dbg !89
  br i1 %11, label %bb7, label %bb8, !dbg !89

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !90
  br label %bb9, !dbg !91

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !92
  %_14 = sdiv i32 %_15, 80, !dbg !92
  %_13 = add nsw i32 %_14, 3, !dbg !93
  %13 = add i32 %d.0, %_13, !dbg !94
  br label %bb9, !dbg !91

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !95
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump After SROAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !14
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !14
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %_4.1, %start ], [ %iter.sroa.4.1, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %5 = icmp ne ptr %iter.sroa.4.0, null
  call void @llvm.assume(i1 %5)
  %6 = icmp ne ptr %_4.0, null
  call void @llvm.assume(i1 %6)
  %_10.i = icmp eq ptr %iter.sroa.4.0, %_4.0, !dbg !56
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !56

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !62
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %iter.sroa.4.1 = phi ptr [ %iter.sroa.4.0, %bb2 ], [ %7, %bb4.i ], !dbg !77
  %.0.i = phi ptr [ %iter.sroa.4.0, %bb4.i ], [ null, %bb2 ], !dbg !78
  %8 = icmp eq ptr %.0.i, null, !dbg !55
  br i1 %8, label %bb6, label %bb4, !dbg !55

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump Before EarlyCSEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  call void @llvm.assume(i1 true)
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  %_4.0 = extractvalue { ptr, ptr } %4, 0, !dbg !14
  %_4.1 = extractvalue { ptr, ptr } %4, 1, !dbg !14
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %_4.1, %start ], [ %iter.sroa.4.1, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %5 = icmp ne ptr %iter.sroa.4.0, null
  call void @llvm.assume(i1 %5)
  %6 = icmp ne ptr %_4.0, null
  call void @llvm.assume(i1 %6)
  %_10.i = icmp eq ptr %iter.sroa.4.0, %_4.0, !dbg !56
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !56

bb4.i:                                            ; preds = %bb2
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !62
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %iter.sroa.4.1 = phi ptr [ %iter.sroa.4.0, %bb2 ], [ %7, %bb4.i ], !dbg !77
  %.0.i = phi ptr [ %iter.sroa.4.0, %bb4.i ], [ null, %bb2 ], !dbg !78
  %8 = icmp eq ptr %.0.i, null, !dbg !55
  br i1 %8, label %bb6, label %bb4, !dbg !55

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %9 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %9, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %10 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %10, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %11 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %11, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %12 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %13 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %13, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %12, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump After EarlyCSEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %iter.sroa.4.1, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !56

bb4.i:                                            ; preds = %bb2
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !62
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %iter.sroa.4.1 = phi ptr [ %iter.sroa.4.0, %bb2 ], [ %5, %bb4.i ], !dbg !77
  %.0.i = phi ptr [ %iter.sroa.4.0, %bb4.i ], [ null, %bb2 ], !dbg !78
  %6 = icmp eq ptr %.0.i, null, !dbg !55
  br i1 %6, label %bb6, label %bb4, !dbg !55

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %7 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %7, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %8, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %9 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %9, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %10 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %11 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %11, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %10, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump Before SpeculativeExecutionPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %iter.sroa.4.1, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !56

bb4.i:                                            ; preds = %bb2
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !62
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %iter.sroa.4.1 = phi ptr [ %iter.sroa.4.0, %bb2 ], [ %5, %bb4.i ], !dbg !77
  %.0.i = phi ptr [ %iter.sroa.4.0, %bb4.i ], [ null, %bb2 ], !dbg !78
  %6 = icmp eq ptr %.0.i, null, !dbg !55
  br i1 %6, label %bb6, label %bb4, !dbg !55

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %7 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %7, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %8, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %9 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %9, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %10 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %11 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %11, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %10, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump After SpeculativeExecutionPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %iter.sroa.4.1, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !56

bb4.i:                                            ; preds = %bb2
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !62
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %iter.sroa.4.1 = phi ptr [ %iter.sroa.4.0, %bb2 ], [ %5, %bb4.i ], !dbg !77
  %.0.i = phi ptr [ %iter.sroa.4.0, %bb4.i ], [ null, %bb2 ], !dbg !78
  %6 = icmp eq ptr %.0.i, null, !dbg !55
  br i1 %6, label %bb6, label %bb4, !dbg !55

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %7 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %7, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %8, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %9 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %9, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %10 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %11 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %11, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %10, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump Before JumpThreadingPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %iter.sroa.4.1, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", label %bb4.i, !dbg !56

bb4.i:                                            ; preds = %bb2
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !62
  br label %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit", !dbg !76

"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit": ; preds = %bb2, %bb4.i
  %iter.sroa.4.1 = phi ptr [ %iter.sroa.4.0, %bb2 ], [ %5, %bb4.i ], !dbg !77
  %.0.i = phi ptr [ %iter.sroa.4.0, %bb4.i ], [ null, %bb2 ], !dbg !78
  %6 = icmp eq ptr %.0.i, null, !dbg !55
  br i1 %6, label %bb6, label %bb4, !dbg !55

bb6:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %7 = mul i32 %s.0, %d.0, !dbg !79
  ret i32 %7, !dbg !80

bb4:                                              ; preds = %"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E.exit"
  %8 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !81
  %_11 = load i64, ptr %8, align 8, !dbg !81, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !86
  %9 = icmp eq i64 %_10, 0, !dbg !86
  br i1 %9, label %bb7, label %bb8, !dbg !86

bb7:                                              ; preds = %bb4
  %10 = shl i32 %s.0, 1, !dbg !87
  br label %bb9, !dbg !88

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !89
  %_14 = sdiv i32 %_15, 80, !dbg !89
  %_13 = add nsw i32 %_14, 3, !dbg !90
  %11 = add i32 %d.0, %_13, !dbg !91
  br label %bb9, !dbg !88

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %11, %bb8 ], !dbg !92
  %s.1 = phi i32 [ %10, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump After JumpThreadingPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %6, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %bb6, label %bb4, !dbg !56

bb6:                                              ; preds = %bb2
  %5 = mul i32 %s.0, %d.0, !dbg !62
  ret i32 %5, !dbg !63

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !64
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !78
  %_11 = load i64, ptr %7, align 8, !dbg !78, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !83
  %8 = icmp eq i64 %_10, 0, !dbg !83
  br i1 %8, label %bb7, label %bb8, !dbg !83

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !84
  br label %bb9, !dbg !85

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !86
  %_14 = sdiv i32 %_15, 80, !dbg !86
  %_13 = add nsw i32 %_14, 3, !dbg !87
  %10 = add i32 %d.0, %_13, !dbg !88
  br label %bb9, !dbg !85

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !89
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %6, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %bb6, label %bb4, !dbg !56

bb6:                                              ; preds = %bb2
  %5 = mul i32 %s.0, %d.0, !dbg !62
  ret i32 %5, !dbg !63

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !64
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !78
  %_11 = load i64, ptr %7, align 8, !dbg !78, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !83
  %8 = icmp eq i64 %_10, 0, !dbg !83
  br i1 %8, label %bb7, label %bb8, !dbg !83

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !84
  br label %bb9, !dbg !85

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !86
  %_14 = sdiv i32 %_15, 80, !dbg !86
  %_13 = add nsw i32 %_14, 3, !dbg !87
  %10 = add i32 %d.0, %_13, !dbg !88
  br label %bb9, !dbg !85

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !89
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %6, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %bb6, label %bb4, !dbg !56

bb6:                                              ; preds = %bb2
  %5 = mul i32 %s.0, %d.0, !dbg !62
  ret i32 %5, !dbg !63

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !64
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !78
  %_11 = load i64, ptr %7, align 8, !dbg !78, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !83
  %8 = icmp eq i64 %_10, 0, !dbg !83
  br i1 %8, label %bb7, label %bb8, !dbg !83

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !84
  br label %bb9, !dbg !85

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !86
  %_14 = sdiv i32 %_15, 80, !dbg !86
  %_13 = add nsw i32 %_14, 3, !dbg !87
  %10 = add i32 %d.0, %_13, !dbg !88
  br label %bb9, !dbg !85

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !89
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %6, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %bb6, label %bb4, !dbg !56

bb6:                                              ; preds = %bb2
  %5 = mul i32 %s.0, %d.0, !dbg !62
  ret i32 %5, !dbg !63

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !64
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !78
  %_11 = load i64, ptr %7, align 8, !dbg !78, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !83
  %8 = icmp eq i64 %_10, 0, !dbg !83
  br i1 %8, label %bb7, label %bb8, !dbg !83

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !84
  br label %bb9, !dbg !85

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !86
  %_14 = sdiv i32 %_15, 80, !dbg !86
  %_13 = add nsw i32 %_14, 3, !dbg !87
  %10 = add i32 %d.0, %_13, !dbg !88
  br label %bb9, !dbg !85

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !89
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %6, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %bb6, label %bb4, !dbg !56

bb6:                                              ; preds = %bb2
  %5 = mul i32 %s.0, %d.0, !dbg !62
  ret i32 %5, !dbg !63

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !64
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !78
  %_11 = load i64, ptr %7, align 8, !dbg !78, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !83
  %8 = icmp eq i64 %_10, 0, !dbg !83
  br i1 %8, label %bb7, label %bb8, !dbg !83

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !84
  br label %bb9, !dbg !85

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !86
  %_14 = sdiv i32 %_15, 80, !dbg !86
  %_13 = add nsw i32 %_14, 3, !dbg !87
  %10 = add i32 %d.0, %_13, !dbg !88
  br label %bb9, !dbg !85

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !89
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %3 = insertvalue { ptr, ptr } undef, ptr %2, 0, !dbg !47
  %4 = insertvalue { ptr, ptr } %3, ptr %v.val, 1, !dbg !47
  br label %bb2, !dbg !48

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %6, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !50
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !51
  call void @llvm.experimental.noalias.scope.decl(metadata !52), !dbg !55
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !56
  br i1 %_10.i, label %bb6, label %bb4, !dbg !56

bb6:                                              ; preds = %bb2
  %5 = mul i32 %s.0, %d.0, !dbg !62
  ret i32 %5, !dbg !63

bb4:                                              ; preds = %bb2
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !64
  %7 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !78
  %_11 = load i64, ptr %7, align 8, !dbg !78, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !83
  %8 = icmp eq i64 %_10, 0, !dbg !83
  br i1 %8, label %bb7, label %bb8, !dbg !83

bb7:                                              ; preds = %bb4
  %9 = shl i32 %s.0, 1, !dbg !84
  br label %bb9, !dbg !85

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !86
  %_14 = sdiv i32 %_15, 80, !dbg !86
  %_13 = add nsw i32 %_14, 3, !dbg !87
  %10 = add i32 %d.0, %_13, !dbg !88
  br label %bb9, !dbg !85

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %10, %bb8 ], !dbg !89
  %s.1 = phi i32 [ %9, %bb7 ], [ %s.0, %bb8 ], !dbg !51
  br label %bb2, !dbg !48
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before AggressiveInstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After AggressiveInstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before LibCallsShrinkWrapPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After LibCallsShrinkWrapPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before TailCallElimPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After TailCallElimPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before ReassociatePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add nsw i32 %_14, 3, !dbg !82
  %8 = add i32 %d.0, %_13, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After ReassociatePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add i32 %d.0, 3, !dbg !82
  %8 = add i32 %_13, %_14, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add i32 %d.0, 3, !dbg !82
  %8 = add i32 %_13, %_14, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add i32 %d.0, 3, !dbg !82
  %8 = add i32 %_13, %_14, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add i32 %d.0, 3, !dbg !82
  %8 = add i32 %_13, %_14, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add i32 %d.0, 3, !dbg !82
  %8 = add i32 %_13, %_14, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %3 = mul i32 %s.0, %d.0, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add i32 %d.0, 3, !dbg !82
  %8 = add i32 %_13, %_14, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump After LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  br label %bb2, !dbg !47

bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !14
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !49
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !50
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !51
  br i1 %_10.i, label %bb6, label %bb4, !dbg !51

bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !49
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !50
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !57
  ret i32 %3, !dbg !58

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !59
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !73
  %_11 = load i64, ptr %5, align 8, !dbg !73, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !78
  %6 = icmp eq i64 %_10, 0, !dbg !78
  br i1 %6, label %bb7, label %bb8, !dbg !78

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !79
  br label %bb9, !dbg !80

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !81
  %_14 = sdiv i32 %_15, 80, !dbg !81
  %_13 = add i32 %d.0, 3, !dbg !82
  %8 = add i32 %_13, %_14, !dbg !83
  br label %bb9, !dbg !80

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !84
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !50
  br label %bb2, !dbg !47
}
*** IR Dump Before LoopInstSimplifyPass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  br label %bb2, !dbg !44

; Loop:
bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !11
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !46
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !47
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !48
  br i1 %_10.i, label %bb6, label %bb4, !dbg !48

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !56
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !70
  %_11 = load i64, ptr %5, align 8, !dbg !70, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !75
  %6 = icmp eq i64 %_10, 0, !dbg !75
  br i1 %6, label %bb7, label %bb8, !dbg !75

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !78
  %_14 = sdiv i32 %_15, 80, !dbg !78
  %_13 = add i32 %d.0, 3, !dbg !79
  %8 = add i32 %_13, %_14, !dbg !80
  br label %bb9, !dbg !77

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !76
  br label %bb9, !dbg !77

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !81
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !47
  br label %bb2, !dbg !44

; Exit blocks
bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !46
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !47
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !54
  ret i32 %3, !dbg !55
*** IR Dump After LoopInstSimplifyPass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  br label %bb2, !dbg !44

; Loop:
bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !11
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !46
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !47
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !48
  br i1 %_10.i, label %bb6, label %bb4, !dbg !48

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !56
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !70
  %_11 = load i64, ptr %5, align 8, !dbg !70, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !75
  %6 = icmp eq i64 %_10, 0, !dbg !75
  br i1 %6, label %bb7, label %bb8, !dbg !75

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !78
  %_14 = sdiv i32 %_15, 80, !dbg !78
  %_13 = add i32 %d.0, 3, !dbg !79
  %8 = add i32 %_13, %_14, !dbg !80
  br label %bb9, !dbg !77

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !76
  br label %bb9, !dbg !77

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !81
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !47
  br label %bb2, !dbg !44

; Exit blocks
bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !46
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !47
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !54
  ret i32 %3, !dbg !55
*** IR Dump Before LoopSimplifyCFGPass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  br label %bb2, !dbg !44

; Loop:
bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !11
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !46
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !47
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !48
  br i1 %_10.i, label %bb6, label %bb4, !dbg !48

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !56
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !70
  %_11 = load i64, ptr %5, align 8, !dbg !70, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !75
  %6 = icmp eq i64 %_10, 0, !dbg !75
  br i1 %6, label %bb7, label %bb8, !dbg !75

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !78
  %_14 = sdiv i32 %_15, 80, !dbg !78
  %_13 = add i32 %d.0, 3, !dbg !79
  %8 = add i32 %_13, %_14, !dbg !80
  br label %bb9, !dbg !77

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !76
  br label %bb9, !dbg !77

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !81
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !47
  br label %bb2, !dbg !44

; Exit blocks
bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !46
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !47
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !54
  ret i32 %3, !dbg !55
*** IR Dump After LoopSimplifyCFGPass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  br label %bb2, !dbg !44

; Loop:
bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !11
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !46
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !47
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !48
  br i1 %_10.i, label %bb6, label %bb4, !dbg !48

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !56
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !70
  %_11 = load i64, ptr %5, align 8, !dbg !70, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !75
  %6 = icmp eq i64 %_10, 0, !dbg !75
  br i1 %6, label %bb7, label %bb8, !dbg !75

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !78
  %_14 = sdiv i32 %_15, 80, !dbg !78
  %_13 = add i32 %d.0, 3, !dbg !79
  %8 = add i32 %_13, %_14, !dbg !80
  br label %bb9, !dbg !77

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !76
  br label %bb9, !dbg !77

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !81
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !47
  br label %bb2, !dbg !44

; Exit blocks
bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !46
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !47
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !54
  ret i32 %3, !dbg !55
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  br label %bb2, !dbg !44

; Loop:
bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !11
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !46
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !47
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !48
  br i1 %_10.i, label %bb6, label %bb4, !dbg !48

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !56
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !70
  %_11 = load i64, ptr %5, align 8, !dbg !70, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !75
  %6 = icmp eq i64 %_10, 0, !dbg !75
  br i1 %6, label %bb7, label %bb8, !dbg !75

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !78
  %_14 = sdiv i32 %_15, 80, !dbg !78
  %_13 = add i32 %d.0, 3, !dbg !79
  %8 = add i32 %_13, %_14, !dbg !80
  br label %bb9, !dbg !77

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !76
  br label %bb9, !dbg !77

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !81
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !47
  br label %bb2, !dbg !44

; Exit blocks
bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !46
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !47
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !54
  ret i32 %3, !dbg !55
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  br label %bb2, !dbg !44

; Loop:
bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !11
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !46
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !47
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !48
  br i1 %_10.i, label %bb6, label %bb4, !dbg !48

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !56
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !70
  %_11 = load i64, ptr %5, align 8, !dbg !70, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !75
  %6 = icmp eq i64 %_10, 0, !dbg !75
  br i1 %6, label %bb7, label %bb8, !dbg !75

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !78
  %_14 = sdiv i32 %_15, 80, !dbg !78
  %_13 = add i32 %d.0, 3, !dbg !79
  %8 = add i32 %_13, %_14, !dbg !80
  br label %bb9, !dbg !77

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !76
  br label %bb9, !dbg !77

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !81
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !47
  br label %bb2, !dbg !44

; Exit blocks
bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !46
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !47
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !54
  ret i32 %3, !dbg !55
*** IR Dump Before LoopRotatePass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  br label %bb2, !dbg !44

; Loop:
bb2:                                              ; preds = %bb9, %start
  %iter.sroa.4.0 = phi ptr [ %v.val, %start ], [ %4, %bb9 ], !dbg !11
  %d.0 = phi i32 [ 3, %start ], [ %d.1, %bb9 ], !dbg !46
  %s.0 = phi i32 [ 3, %start ], [ %s.1, %bb9 ], !dbg !47
  %_10.i = icmp eq ptr %iter.sroa.4.0, %2, !dbg !48
  br i1 %_10.i, label %bb6, label %bb4, !dbg !48

bb4:                                              ; preds = %bb2
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.0, i64 1, !dbg !56
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !70
  %_11 = load i64, ptr %5, align 8, !dbg !70, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !75
  %6 = icmp eq i64 %_10, 0, !dbg !75
  br i1 %6, label %bb7, label %bb8, !dbg !75

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.0, 23, !dbg !78
  %_14 = sdiv i32 %_15, 80, !dbg !78
  %_13 = add i32 %d.0, 3, !dbg !79
  %8 = add i32 %_13, %_14, !dbg !80
  br label %bb9, !dbg !77

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.0, 1, !dbg !76
  br label %bb9, !dbg !77

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.0, %bb7 ], [ %8, %bb8 ], !dbg !81
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.0, %bb8 ], !dbg !47
  br label %bb2, !dbg !44

; Exit blocks
bb6:                                              ; preds = %bb2
  %d.0.lcssa = phi i32 [ %d.0, %bb2 ], !dbg !46
  %s.0.lcssa = phi i32 [ %s.0, %bb2 ], !dbg !47
  %3 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !54
  ret i32 %3, !dbg !55
*** IR Dump After LoopRotatePass on Loop at depth 1 containing: %bb2<header><exiting>,%bb4,%bb8,%bb7,%bb9<latch> ***

; Preheader:
bb4.lr.ph:                                        ; preds = %start
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph, %bb9
  %s.011 = phi i32 [ 3, %bb4.lr.ph ], [ %s.1, %bb9 ]
  %d.010 = phi i32 [ 3, %bb4.lr.ph ], [ %d.1, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph ], [ %4, %bb9 ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !55
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !69
  %_11 = load i64, ptr %5, align 8, !dbg !69, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !74
  %6 = icmp eq i64 %_10, 0, !dbg !74
  br i1 %6, label %bb7, label %bb8, !dbg !74

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !77
  %_14 = sdiv i32 %_15, 80, !dbg !77
  %_13 = add i32 %d.010, 3, !dbg !78
  %8 = add i32 %_13, %_14, !dbg !79
  br label %bb9, !dbg !76

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.011, 1, !dbg !75
  br label %bb9, !dbg !76

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.010, %bb7 ], [ %8, %bb8 ], !dbg !80
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.011, %bb8 ], !dbg !52
  %_10.i = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge:                                ; preds = %bb9
  %split = phi i32 [ %d.1, %bb9 ]
  %split12 = phi i32 [ %s.1, %bb9 ]
  br label %bb6, !dbg !44
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb7,%bb9<latch><exiting> ***

; Preheader:
bb4.lr.ph:                                        ; preds = %start
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph, %bb9
  %s.011 = phi i32 [ 3, %bb4.lr.ph ], [ %s.1, %bb9 ]
  %d.010 = phi i32 [ 3, %bb4.lr.ph ], [ %d.1, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph ], [ %4, %bb9 ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !55
  %5 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1, !dbg !69
  %_11 = load i64, ptr %5, align 8, !dbg !69, !noundef !10
  %_10 = and i64 %_11, 1, !dbg !74
  %6 = icmp eq i64 %_10, 0, !dbg !74
  br i1 %6, label %bb7, label %bb8, !dbg !74

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !77
  %_14 = sdiv i32 %_15, 80, !dbg !77
  %_13 = add i32 %d.010, 3, !dbg !78
  %8 = add i32 %_13, %_14, !dbg !79
  br label %bb9, !dbg !76

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.011, 1, !dbg !75
  br label %bb9, !dbg !76

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.010, %bb7 ], [ %8, %bb8 ], !dbg !80
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.011, %bb8 ], !dbg !52
  %_10.i = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge:                                ; preds = %bb9
  %split = phi i32 [ %d.1, %bb9 ]
  %split12 = phi i32 [ %s.1, %bb9 ]
  br label %bb6, !dbg !44
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb7,%bb9<latch><exiting> ***

; Preheader:
bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph, %bb9
  %s.011 = phi i32 [ 3, %bb4.lr.ph ], [ %s.1, %bb9 ]
  %d.010 = phi i32 [ 3, %bb4.lr.ph ], [ %d.1, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph ], [ %6, %bb9 ]
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !55
  br i1 %4, label %bb7, label %bb8, !dbg !69

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !75
  br label %bb9, !dbg !72

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.011, 1, !dbg !71
  br label %bb9, !dbg !72

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.010, %bb7 ], [ %8, %bb8 ], !dbg !76
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.011, %bb8 ], !dbg !52
  %_10.i = icmp eq ptr %6, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge:                                ; preds = %bb9
  %split = phi i32 [ %d.1, %bb9 ]
  %split12 = phi i32 [ %s.1, %bb9 ]
  br label %bb6, !dbg !44
*** IR Dump Before SimpleLoopUnswitchPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb7,%bb9<latch><exiting> ***

; Preheader:
bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph, %bb9
  %s.011 = phi i32 [ 3, %bb4.lr.ph ], [ %s.1, %bb9 ]
  %d.010 = phi i32 [ 3, %bb4.lr.ph ], [ %d.1, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph ], [ %6, %bb9 ]
  %6 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !55
  br i1 %4, label %bb7, label %bb8, !dbg !69

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !75
  br label %bb9, !dbg !72

bb7:                                              ; preds = %bb4
  %7 = shl i32 %s.011, 1, !dbg !71
  br label %bb9, !dbg !72

bb9:                                              ; preds = %bb7, %bb8
  %d.1 = phi i32 [ %d.010, %bb7 ], [ %8, %bb8 ], !dbg !76
  %s.1 = phi i32 [ %7, %bb7 ], [ %s.011, %bb8 ], !dbg !52
  %_10.i = icmp eq ptr %6, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge:                                ; preds = %bb9
  %split = phi i32 [ %d.1, %bb9 ]
  %split12 = phi i32 [ %s.1, %bb9 ]
  br label %bb6, !dbg !44
*** IR Dump After SimpleLoopUnswitchPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb7,%bb9<latch><exiting> (invalidated) ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"alloc::vec::Vec<i32>" = type { { i64, ptr }, i64 }

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq ptr %v.val, %2, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.lr.ph.split.us, label %bb4.lr.ph.split, !dbg !54

bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb9.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %s.1.us, %bb9.us ]
  %d.010.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %d.1.us, %bb9.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb9.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  br label %bb7.us

bb7.us:                                           ; preds = %bb4.us
  %6 = shl i32 %s.011.us, 1, !dbg !70
  br label %bb9.us, !dbg !71

bb9.us:                                           ; preds = %bb7.us
  %d.1.us = phi i32 [ %d.010.us, %bb7.us ], !dbg !72
  %s.1.us = phi i32 [ %6, %bb7.us ], !dbg !73
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !47

bb2.bb6_crit_edge.split.us:                       ; preds = %bb9.us
  %split.us = phi i32 [ %d.1.us, %bb9.us ]
  %split12.us = phi i32 [ %s.1.us, %bb9.us ]
  br label %bb2.bb6_crit_edge, !dbg !47

bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb2.bb6_crit_edge.split:                          ; preds = %bb9
  %split = phi i32 [ %9, %bb9 ]
  %split12 = phi i32 [ %s.011, %bb9 ]
  br label %bb2.bb6_crit_edge, !dbg !47

bb2.bb6_crit_edge:                                ; preds = %bb2.bb6_crit_edge.split.us, %bb2.bb6_crit_edge.split
  %.us-phi = phi i32 [ %split, %bb2.bb6_crit_edge.split ], [ %split.us, %bb2.bb6_crit_edge.split.us ]
  %.us-phi13 = phi i32 [ %split12, %bb2.bb6_crit_edge.split ], [ %split12.us, %bb2.bb6_crit_edge.split.us ]
  br label %bb6, !dbg !47

bb6:                                              ; preds = %bb2.bb6_crit_edge, %start
  %d.0.lcssa = phi i32 [ %.us-phi, %bb2.bb6_crit_edge ], [ 3, %start ], !dbg !74
  %s.0.lcssa = phi i32 [ %.us-phi13, %bb2.bb6_crit_edge ], [ 3, %start ], !dbg !73
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !75
  ret i32 %7, !dbg !76

bb4:                                              ; preds = %bb4.lr.ph.split, %bb9
  %s.011 = phi i32 [ 3, %bb4.lr.ph.split ], [ %s.011, %bb9 ]
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb9 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  br label %bb8

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !77
  %_14 = sdiv i32 %_15, 80, !dbg !77
  %_13 = add i32 %d.010, 3, !dbg !78
  %9 = add i32 %_13, %_14, !dbg !79
  br label %bb9, !dbg !71

bb9:                                              ; preds = %bb8
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !47
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #4

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #4 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 9, column: 9, scope: !55)
!72 = !DILocation(line: 0, scope: !16)
!73 = !DILocation(line: 0, scope: !13)
!74 = !DILocation(line: 7, column: 17, scope: !16)
!75 = !DILocation(line: 15, column: 5, scope: !15)
!76 = !DILocation(line: 16, column: 2, scope: !13)
!77 = !DILocation(line: 12, column: 22, scope: !55)
!78 = !DILocation(line: 12, column: 18, scope: !55)
!79 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before LoopInstSimplifyPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb9<latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb9
  %s.011 = phi i32 [ 3, %bb4.lr.ph.split ], [ %s.011, %bb9 ]
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb9 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  br label %bb8

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  br label %bb9, !dbg !68

bb9:                                              ; preds = %bb8
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb9
  %split = phi i32 [ %9, %bb9 ]
  %split12 = phi i32 [ %s.011, %bb9 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LoopInstSimplifyPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb9<latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb9
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb9 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  br label %bb8

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  br label %bb9, !dbg !68

bb9:                                              ; preds = %bb8
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb9
  %split = phi i32 [ %9, %bb9 ]
  %split12 = phi i32 [ 3, %bb9 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LoopSimplifyCFGPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb9<latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb9
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb9 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb9 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  br label %bb8

bb8:                                              ; preds = %bb4
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  br label %bb9, !dbg !68

bb9:                                              ; preds = %bb8
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb9
  %split = phi i32 [ %9, %bb9 ]
  %split12 = phi i32 [ 3, %bb9 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LoopSimplifyCFGPass on Loop at depth 1 containing: %bb4<header>,%bb8,%bb9<latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LoopRotatePass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LoopRotatePass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before SimpleLoopUnswitchPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After SimpleLoopUnswitchPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !74
  %_14 = sdiv i32 %_15, 80, !dbg !74
  %_13 = add i32 %d.010, 3, !dbg !75
  %9 = add i32 %_13, %_14, !dbg !76
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LoopInstSimplifyPass on Loop at depth 1 containing: %bb4.us<header>,%bb7.us,%bb9.us<latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb9.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %s.1.us, %bb9.us ]
  %d.010.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %d.1.us, %bb9.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb9.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  br label %bb7.us

bb7.us:                                           ; preds = %bb4.us
  %6 = shl i32 %s.011.us, 1, !dbg !67
  br label %bb9.us, !dbg !68

bb9.us:                                           ; preds = %bb7.us
  %d.1.us = phi i32 [ %d.010.us, %bb7.us ], !dbg !69
  %s.1.us = phi i32 [ %6, %bb7.us ], !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb9.us
  %split.us = phi i32 [ %d.1.us, %bb9.us ]
  %split12.us = phi i32 [ %s.1.us, %bb9.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LoopInstSimplifyPass on Loop at depth 1 containing: %bb4.us<header>,%bb7.us,%bb9.us<latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb9.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb9.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb9.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  br label %bb7.us

bb7.us:                                           ; preds = %bb4.us
  %6 = shl i32 %s.011.us, 1, !dbg !67
  br label %bb9.us, !dbg !68

bb9.us:                                           ; preds = %bb7.us
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb9.us
  %split.us = phi i32 [ 3, %bb9.us ]
  %split12.us = phi i32 [ %6, %bb9.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LoopSimplifyCFGPass on Loop at depth 1 containing: %bb4.us<header>,%bb7.us,%bb9.us<latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb9.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb9.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb9.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  br label %bb7.us

bb7.us:                                           ; preds = %bb4.us
  %6 = shl i32 %s.011.us, 1, !dbg !67
  br label %bb9.us, !dbg !68

bb9.us:                                           ; preds = %bb7.us
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb9.us
  %split.us = phi i32 [ 3, %bb9.us ]
  %split12.us = phi i32 [ %6, %bb9.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LoopSimplifyCFGPass on Loop at depth 1 containing: %bb4.us<header>,%bb7.us,%bb9.us<latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LoopRotatePass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LoopRotatePass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before SimpleLoopUnswitchPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump After SimpleLoopUnswitchPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !44

; Exit blocks
bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !44
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq ptr %v.val, %2, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.lr.ph.split.us, label %bb4.lr.ph.split, !dbg !54

bb4.lr.ph.split.us:                               ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us, %bb4.lr.ph.split.us
  %s.011.us = phi i32 [ 3, %bb4.lr.ph.split.us ], [ %6, %bb4.us ]
  %iter.sroa.4.09.us = phi ptr [ %v.val, %bb4.lr.ph.split.us ], [ %5, %bb4.us ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb2.bb6_crit_edge.split.us, label %bb4.us, !dbg !47

bb2.bb6_crit_edge.split.us:                       ; preds = %bb4.us
  %split.us = phi i32 [ 3, %bb4.us ]
  %split12.us = phi i32 [ %6, %bb4.us ]
  br label %bb2.bb6_crit_edge, !dbg !47

bb4.lr.ph.split:                                  ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb2.bb6_crit_edge.split:                          ; preds = %bb4
  %split = phi i32 [ %9, %bb4 ]
  %split12 = phi i32 [ 3, %bb4 ]
  br label %bb2.bb6_crit_edge, !dbg !47

bb2.bb6_crit_edge:                                ; preds = %bb2.bb6_crit_edge.split.us, %bb2.bb6_crit_edge.split
  %.us-phi = phi i32 [ %split, %bb2.bb6_crit_edge.split ], [ %split.us, %bb2.bb6_crit_edge.split.us ]
  %.us-phi13 = phi i32 [ %split12, %bb2.bb6_crit_edge.split ], [ %split12.us, %bb2.bb6_crit_edge.split.us ]
  br label %bb6, !dbg !47

bb6:                                              ; preds = %bb2.bb6_crit_edge, %start
  %d.0.lcssa = phi i32 [ %.us-phi, %bb2.bb6_crit_edge ], [ 3, %start ], !dbg !71
  %s.0.lcssa = phi i32 [ %.us-phi13, %bb2.bb6_crit_edge ], [ 3, %start ], !dbg !72
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %7, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph.split, %bb4
  %d.010 = phi i32 [ 3, %bb4.lr.ph.split ], [ %9, %bb4 ]
  %iter.sroa.4.09 = phi ptr [ %v.val, %bb4.lr.ph.split ], [ %8, %bb4 ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %9 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb2.bb6_crit_edge.split, label %bb4, !dbg !47
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq ptr %v.val, %2, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4.us, %bb4, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %9, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %6, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %7, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %9 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq ptr %v.val, %2, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4.us, %bb4, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %9, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %6, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %7, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %9 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4.us, %bb4, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %9, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %6, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %7, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %9 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4.us, %bb4, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %9, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %6, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %7, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %9 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %9, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %6, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %9 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %9, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %6, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %9 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa15, %bb6.loopexit14 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !74
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %9 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before LoopIdiomRecognizePass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After LoopIdiomRecognizePass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before IndVarSimplifyPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After IndVarSimplifyPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before LoopDeletionPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After LoopDeletionPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before LoopFullUnrollPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After LoopFullUnrollPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %9 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %8, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before LoopIdiomRecognizePass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After LoopIdiomRecognizePass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before IndVarSimplifyPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After IndVarSimplifyPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before LoopDeletionPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After LoopDeletionPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before LoopFullUnrollPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After LoopFullUnrollPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %6 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %5, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before SROAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa15, %bb6.loopexit14 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !74
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %9 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After SROAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa15, %bb6.loopexit14 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !74
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %9 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before MergedLoadStoreMotionPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa15, %bb6.loopexit14 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !74
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %9 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After MergedLoadStoreMotionPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa15, %bb6.loopexit14 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !74
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %9 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before GVNPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %3 = getelementptr inbounds %"alloc::vec::Vec<i32>", ptr %v, i64 0, i32 1
  %_11 = load i64, ptr %3, align 8, !noundef !10
  %_10 = and i64 %_11, 1
  %4 = icmp eq i64 %_10, 0
  br i1 %4, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %6, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %5, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %5 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %6 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %5, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %6, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  %.lcssa15 = phi i32 [ %9, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa15, %bb6.loopexit14 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !74
  %7 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %7, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %9, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %8, %bb4 ], [ %v.val, %bb4.preheader ]
  %8 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %9 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %8, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After GVNPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before SCCPPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After SCCPPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before BDCEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After BDCEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump Before JumpThreadingPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit14:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit14, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit14 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit14 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit14, label %bb4, !dbg !47
}
*** IR Dump After JumpThreadingPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before CorrelatedValuePropagationPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After CorrelatedValuePropagationPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before ADCEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After ADCEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before MemCpyOptPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After MemCpyOptPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before DSEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After DSEPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit16:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit16, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit16 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit16 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !47
}
*** IR Dump Before LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit16:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit16, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit16 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit16 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !47
}
*** IR Dump After LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit16:                                   ; preds = %bb4
  %.lcssa17 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit16, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa17, %bb6.loopexit16 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit16 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !47
}
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit16:                                   ; preds = %bb4
  %.lcssa17 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit16:                                   ; preds = %bb4
  %.lcssa17 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before CoroElidePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit16:                                   ; preds = %bb4
  %.lcssa17 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit16, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa17, %bb6.loopexit16 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit16 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !47
}
*** IR Dump After CoroElidePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit16:                                   ; preds = %bb4
  %.lcssa17 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit16, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa17, %bb6.loopexit16 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit16 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !47
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit16:                                   ; preds = %bb4
  %.lcssa17 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit16, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa17, %bb6.loopexit16 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit16 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit16, label %bb4, !dbg !47
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before CoroSplitPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !44
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !44

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !51

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !44

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !68
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !69
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !70
  ret i32 %6, !dbg !71

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !72
  %_14 = sdiv i32 %_15, 80, !dbg !72
  %_13 = add i32 %d.010, 3, !dbg !73
  %8 = add i32 %_13, %_14, !dbg !74
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6, label %bb4, !dbg !44
}
*** IR Dump After CoroSplitPass on (_ZN7example3foo17hda9c57ed47971229E) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !6 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !11
  %v.val = load ptr, ptr %0, align 8, !dbg !11, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !11
  %v.val5 = load i64, ptr %1, align 8, !dbg !11, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !14
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !44
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !44

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !51

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !44

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !68
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !69
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !70
  ret i32 %6, !dbg !71

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !72
  %_14 = sdiv i32 %_15, 80, !dbg !72
  %_13 = add i32 %d.010, 3, !dbg !73
  %8 = add i32 %_13, %_14, !dbg !74
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6, label %bb4, !dbg !44
}
*** IR Dump Before InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before CoroCleanupPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #4

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #4 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After CoroCleanupPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #4

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #4 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before GlobalOptPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #4

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #4 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before GlobalDCEPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before EliminateAvailableExternallyPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After EliminateAvailableExternallyPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before ReversePostOrderFunctionAttrsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After ReversePostOrderFunctionAttrsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before RecomputeGlobalsAAPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After RecomputeGlobalsAAPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before Float2IntPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Float2IntPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LowerConstantIntrinsicsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LowerConstantIntrinsicsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LoopDistributePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LoopDistributePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InjectTLIMappings on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InjectTLIMappings on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LoopVectorizePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LoopVectorizePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LoopLoadEliminationPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LoopLoadEliminationPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before SLPVectorizerPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After SLPVectorizerPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before VectorCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After VectorCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LoopUnrollPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LoopUnrollPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before WarnMissedTransformationsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After WarnMissedTransformationsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InstCombinePass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LoopSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LCSSAPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before AlignmentFromAssumptionsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After AlignmentFromAssumptionsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before LoopSinkPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After LoopSinkPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before InstSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After InstSimplifyPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before DivRemPairsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After DivRemPairsPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before TailCallElimPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After TailCallElimPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After SimplifyCFGPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Float2IntPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After Float2IntPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before LowerConstantIntrinsicsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After LowerConstantIntrinsicsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit18 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump Before LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit18 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump After LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump Before LoopRotatePass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After LoopRotatePass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before LoopDeletionPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After LoopDeletionPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before LoopRotatePass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After LoopRotatePass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before LoopDeletionPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After LoopDeletionPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before LoopDistributePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump After LoopDistributePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump Before InjectTLIMappings on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump After InjectTLIMappings on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump Before LoopVectorizePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump After LoopVectorizePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump Before LoopLoadEliminationPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump After LoopLoadEliminationPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  %.lcssa19 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa19, %bb6.loopexit18 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit18 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit18:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit18, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit18 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit18 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit18, label %bb4, !dbg !47
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before SLPVectorizerPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After SLPVectorizerPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before VectorCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After VectorCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before LoopUnrollPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After LoopUnrollPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa21 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa21, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before WarnMissedTransformationsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa21 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa21, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After WarnMissedTransformationsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa21 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa21, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa21 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa21, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After InstCombinePass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After RequireAnalysisPass<llvm::OptimizationRemarkEmitterAnalysis, llvm::Function> on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After LoopSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After LCSSAPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa22, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4<header><latch><exiting> ***

; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !53
  %_15 = mul i32 %d.010, 23, !dbg !73
  %_14 = sdiv i32 %_15, 80, !dbg !73
  %_13 = add i32 %d.010, 3, !dbg !74
  %8 = add i32 %_13, %_14, !dbg !69
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !69
  br label %bb6, !dbg !68
*** IR Dump Before LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump After LICMPass on Loop at depth 1 containing: %bb4.us<header><latch><exiting> ***

; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !67
  br label %bb6, !dbg !68
*** IR Dump Before AlignmentFromAssumptionsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa22, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After AlignmentFromAssumptionsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa22, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before LoopSinkPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa22, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After LoopSinkPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa22, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before InstSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  %.lcssa = phi i32 [ %5, %bb4.us ], !dbg !70
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  %.lcssa22 = phi i32 [ %8, %bb4 ], !dbg !72
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %.lcssa22, %bb6.loopexit20 ], !dbg !73
  %s.0.lcssa = phi i32 [ 3, %start ], [ %.lcssa, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !74
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !75

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !76
  %_14 = sdiv i32 %_15, 80, !dbg !76
  %_13 = add i32 %d.010, 3, !dbg !77
  %8 = add i32 %_13, %_14, !dbg !72
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After InstSimplifyPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before DivRemPairsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After DivRemPairsPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before TailCallElimPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After TailCallElimPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump Before SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit20:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit20, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit20 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit20 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit20, label %bb4, !dbg !47
}
*** IR Dump After SimplifyCFGPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before MergeFunctionsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After MergeFunctionsPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before GlobalDCEPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before ConstantMergePass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After ConstantMergePass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before CGProfilePass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After CGProfilePass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before RelLookupTableConverterPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After RelLookupTableConverterPass on [module] ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before AnnotationRemarksPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After AnnotationRemarksPass on _ZN7example3bar17h44b29894c727e317E ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before AnnotationRemarksPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After AnnotationRemarksPass on _ZN7example3foo17hda9c57ed47971229E ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'example.c11cd440-cgu.0'
source_filename = "example.c11cd440-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}

; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { nofree nosync nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 7, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !5, producer: "clang LLVM (rustc version 1.69.0-nightly (07c993eba 2023-02-23))", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!5 = !DIFile(filename: "<source>/@/example.c11cd440-cgu.0", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31")
!6 = distinct !DISubprogram(name: "bar", linkageName: "_ZN7example3bar17h44b29894c727e317E", scope: !8, file: !7, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!7 = !DIFile(filename: "example.rs", directory: "/tmp/compiler-explorer-compiler2023124-22587-1klont6.3s31", checksumkind: CSK_MD5, checksum: "715d66d75ae9d5877002b0528770bbe9")
!8 = !DINamespace(name: "example", scope: null)
!9 = !DISubroutineType(types: !10)
!10 = !{}
!11 = !DILocation(line: 2, column: 5, scope: !6)
!12 = !DILocation(line: 3, column: 2, scope: !6)
!13 = distinct !DISubprogram(name: "foo", linkageName: "_ZN7example3foo17hda9c57ed47971229E", scope: !8, file: !7, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!14 = !DILocation(line: 8, column: 14, scope: !15)
!15 = distinct !DILexicalBlock(scope: !16, file: !7, line: 7, column: 5)
!16 = distinct !DILexicalBlock(scope: !13, file: !7, line: 6, column: 5)
!17 = !DILocation(line: 465, column: 18, scope: !18, inlinedAt: !25)
!18 = distinct !DILexicalBlock(scope: !20, file: !19, line: 465, column: 9)
!19 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/const_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "310ccb1a5479a9302756ed4297f2c8bd")
!20 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hc2f938e51b9e8c8cE", scope: !21, file: !19, line: 460, type: !9, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!21 = !DINamespace(name: "{impl#0}", scope: !22)
!22 = !DINamespace(name: "const_ptr", scope: !23)
!23 = !DINamespace(name: "ptr", scope: !24)
!24 = !DINamespace(name: "core", scope: null)
!25 = distinct !DILocation(line: 920, column: 23, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlock(scope: !27, file: !19, line: 920, column: 9)
!27 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hde744d31816b0051E", scope: !21, file: !19, line: 915, type: !9, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!28 = distinct !DILocation(line: 91, column: 80, scope: !29, inlinedAt: !36)
!29 = distinct !DILexicalBlock(scope: !31, file: !30, line: 87, column: 9)
!30 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter.rs", directory: "", checksumkind: CSK_MD5, checksum: "873209af95ace3fbbcdd03c09eda7332")
!31 = distinct !DILexicalBlock(scope: !32, file: !30, line: 85, column: 9)
!32 = distinct !DISubprogram(name: "new<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd6b54ed1d044051dE", scope: !33, file: !30, line: 84, type: !9, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!33 = !DINamespace(name: "Iter", scope: !34)
!34 = !DINamespace(name: "iter", scope: !35)
!35 = !DINamespace(name: "slice", scope: !24)
!36 = distinct !DILocation(line: 742, column: 9, scope: !37, inlinedAt: !40)
!37 = distinct !DISubprogram(name: "iter<i32>", linkageName: "_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6afb2b0c688822d1E", scope: !39, file: !38, line: 741, type: !9, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!38 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "c080588f2e23f57a242d9fad86267984")
!39 = !DINamespace(name: "{impl#0}", scope: !35)
!40 = distinct !DILocation(line: 2779, column: 14, scope: !41, inlinedAt: !46)
!41 = distinct !DISubprogram(name: "into_iter<i32, alloc::alloc::Global>", linkageName: "_ZN94_$LT$$RF$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he5138d906ed62bb2E", scope: !43, file: !42, line: 2778, type: !9, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!42 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/alloc/src/vec/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "025ef0f8393f7a1aa9bee190d66c5021")
!43 = !DINamespace(name: "{impl#17}", scope: !44)
!44 = !DINamespace(name: "vec", scope: !45)
!45 = !DINamespace(name: "alloc", scope: null)
!46 = distinct !DILocation(line: 8, column: 14, scope: !15)
!47 = !DILocation(line: 136, column: 24, scope: !48, inlinedAt: !52)
!48 = distinct !DILexicalBlock(scope: !50, file: !49, line: 131, column: 17)
!49 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs", directory: "", checksumkind: CSK_MD5, checksum: "471ba458e4027bbd8c4174bbeafb0c53")
!50 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64c20bc24908ba23E", scope: !51, file: !49, line: 124, type: !9, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!51 = !DINamespace(name: "{impl#181}", scope: !34)
!52 = distinct !DILocation(line: 8, column: 14, scope: !53)
!53 = distinct !DILexicalBlock(scope: !15, file: !7, line: 8, column: 5)
!54 = !DILocation(line: 9, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !7, line: 8, column: 16)
!56 = !DILocation(line: 479, column: 18, scope: !57, inlinedAt: !62)
!57 = distinct !DILexicalBlock(scope: !59, file: !58, line: 479, column: 9)
!58 = !DIFile(filename: "/rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/ptr/mut_ptr.rs", directory: "", checksumkind: CSK_MD5, checksum: "8f9c2a68da2d937402d223242416154f")
!59 = distinct !DISubprogram(name: "offset<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h618401e86c12a48aE", scope: !60, file: !58, line: 472, type: !9, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!60 = !DINamespace(name: "{impl#0}", scope: !61)
!61 = !DINamespace(name: "mut_ptr", scope: !23)
!62 = distinct !DILocation(line: 1020, column: 23, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlock(scope: !64, file: !58, line: 1020, column: 9)
!64 = distinct !DISubprogram(name: "add<i32>", linkageName: "_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h848e3e81b4c7f55eE", scope: !60, file: !58, line: 1015, type: !9, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!65 = distinct !DILocation(line: 83, column: 82, scope: !66, inlinedAt: !69)
!66 = distinct !DILexicalBlock(scope: !67, file: !49, line: 83, column: 32)
!67 = distinct !DILexicalBlock(scope: !68, file: !49, line: 80, column: 21)
!68 = distinct !DISubprogram(name: "post_inc_start<i32>", linkageName: "_ZN4core5slice4iter13Iter$LT$T$GT$14post_inc_start17h5755e56787652573E", scope: !33, file: !49, line: 75, type: !9, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !4, templateParams: !10, retainedNodes: !10)
!69 = distinct !DILocation(line: 43, column: 53, scope: !48, inlinedAt: !52)
!70 = !DILocation(line: 10, column: 13, scope: !55)
!71 = !DILocation(line: 7, column: 17, scope: !16)
!72 = !DILocation(line: 0, scope: !13)
!73 = !DILocation(line: 15, column: 5, scope: !15)
!74 = !DILocation(line: 16, column: 2, scope: !13)
!75 = !DILocation(line: 12, column: 22, scope: !55)
!76 = !DILocation(line: 12, column: 18, scope: !55)
!77 = !DILocation(line: 12, column: 13, scope: !55)
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before TLS Variable Hoist (tlshoist) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After TLS Variable Hoist (tlshoist) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readnone willreturn uwtable
define noundef i32 @_ZN7example3bar17h44b29894c727e317E(i32 noundef %v) unnamed_addr #0 !dbg !6 {
start:
  %0 = mul i32 %v, %v, !dbg !11
  ret i32 %0, !dbg !12
}
# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
48B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
64B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
48B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
64B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = IMUL32rr %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = IMUL32rr killed %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: IsSSA, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = IMUL32rr killed %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = IMUL32rr killed %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = IMUL32rr killed %0:gr32(tied-def 0), %0:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32, debug-location !11; example.rs:2:5
  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

bb.0.start:
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32, debug-location !11; example.rs:2:5
  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32, debug-location !11; example.rs:2:5
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32, debug-location !11; example.rs:2:5
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY killed %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32, debug-location !11; example.rs:2:5
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32, debug-location !11; example.rs:2:5
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, killed $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi in %0

0B	bb.0.start:
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  %1:gr32 = IMUL32rr %1:gr32(tied-def 0), %1:gr32, implicit-def dead $eflags, debug-location !11; example.rs:2:5
64B	  $eax = COPY %1:gr32, debug-location !12; example.rs:3:2
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

0B	bb.0.start:
	  liveins: $edi
16B	  renamable $eax = COPY $edi
48B	  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !11; example.rs:2:5
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

0B	bb.0.start:
	  liveins: $edi
16B	  renamable $eax = COPY $edi
48B	  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !11; example.rs:2:5
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

0B	bb.0.start:
	  liveins: $edi
16B	  renamable $eax = COPY $edi
48B	  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !11; example.rs:2:5
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

0B	bb.0.start:
	  liveins: $edi
16B	  renamable $eax = COPY $edi
48B	  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !11; example.rs:2:5
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

0B	bb.0.start:
	  liveins: $edi
16B	  renamable $eax = COPY $edi
48B	  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !11; example.rs:2:5
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

0B	bb.0.start:
	  liveins: $edi
16B	  renamable $eax = COPY $edi
48B	  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !11; example.rs:2:5
80B	  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  renamable $eax = COPY $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET 0, $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function _ZN7example3bar17h44b29894c727e317E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $edi

bb.0.start:
  liveins: $edi
  $eax = MOV32rr $edi
  renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), $edi, implicit-def dead $eflags, debug-location !11; example.rs:2:5
  RET64 $eax, debug-location !12; example.rs:3:2

# End machine code for function _ZN7example3bar17h44b29894c727e317E.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us, label %bb4, !dbg !54

bb4.us:                                           ; preds = %bb4.lr.ph, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.lr.ph ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !47

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %8, %bb4 ], !dbg !71
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb4.us ], [ 3, %bb4 ], !dbg !72
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !73
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.lr.ph, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.lr.ph ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.lr.ph ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6, label %bb4, !dbg !47
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 8, !dbg !14
  %v.val = load ptr, ptr %0, align 8, !dbg !14, !nonnull !10, !noundef !10
  %1 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %1, align 8, !dbg !14, !noundef !10
  %2 = getelementptr inbounds i32, ptr %v.val, i64 %v.val5, !dbg !17
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !47
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !47

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %3 = icmp eq i64 %_10, 0
  br i1 %3, label %bb4.us.preheader, label %bb4.preheader, !dbg !54

bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !47

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !47

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !56
  %5 = shl i32 %s.011.us, 1, !dbg !70
  %_10.i.us = icmp eq ptr %4, %2, !dbg !47
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !47

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !71

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !71

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %8, %bb6.loopexit23 ], !dbg !72
  %s.0.lcssa = phi i32 [ 3, %start ], [ %5, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !73
  %6 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !71
  ret i32 %6, !dbg !74

bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !56
  %_15 = mul i32 %d.010, 23, !dbg !75
  %_14 = sdiv i32 %_15, 80, !dbg !75
  %_13 = add i32 %d.010, 3, !dbg !76
  %8 = add i32 %_13, %_14, !dbg !77
  %_10.i = icmp eq ptr %7, %2, !dbg !47
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !47
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !68
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !68
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %iter.sroa.4.09.us = phi ptr [ %4, %bb4.us ], [ %v.val, %bb4.us.preheader ]
  %4 = getelementptr inbounds i32, ptr %iter.sroa.4.09.us, i64 1, !dbg !53
  %5 = shl i32 %s.011.us, 1, !dbg !67
  %_10.i.us = icmp eq ptr %4, %2, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !68
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %4 = shl i64 %v.val5, 2, !dbg !44
  br label %bb4.us, !dbg !44

; Loop:
bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %4, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %5, %bb4.us ], [ 3, %bb4.us.preheader ]
  %5 = shl i32 %s.011.us, 1, !dbg !53
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !44
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !44
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !44
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !44

; Exit blocks
bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !54
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !58
  %_15 = mul i32 %d.010, 23, !dbg !72
  %_14 = sdiv i32 %_15, 80, !dbg !72
  %_13 = add i32 %d.010, 3, !dbg !73
  %8 = add i32 %_13, %_14, !dbg !74
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !54
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !58
  %_15 = mul i32 %d.010, 23, !dbg !72
  %_14 = sdiv i32 %_15, 80, !dbg !72
  %_13 = add i32 %d.010, 3, !dbg !73
  %8 = add i32 %_13, %_14, !dbg !74
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !54
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  br label %bb4, !dbg !44

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %d.010 = phi i32 [ %8, %bb4 ], [ 3, %bb4.preheader ]
  %iter.sroa.4.09 = phi ptr [ %7, %bb4 ], [ %v.val, %bb4.preheader ]
  %7 = getelementptr inbounds i32, ptr %iter.sroa.4.09, i64 1, !dbg !58
  %_15 = mul i32 %d.010, 23, !dbg !72
  %_14 = sdiv i32 %_15, 80, !dbg !72
  %_13 = add i32 %d.010, 3, !dbg !73
  %8 = add i32 %_13, %_14, !dbg !74
  %_10.i = icmp eq ptr %7, %2, !dbg !44
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !44

; Exit blocks
bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !54
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !14
  br label %bb4, !dbg !14

; Loop:
bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !31
  %_14 = sdiv i32 %_15, 80, !dbg !31
  %_13 = add i32 %d.010, 3, !dbg !32
  %6 = add i32 %_13, %_14, !dbg !33
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !14
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !14
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !14
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !14

; Exit blocks
bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !27
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before TLS Variable Hoist (tlshoist) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After TLS Variable Hoist (tlshoist) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6.loopexit, label %bb4.us, !dbg !17

bb6.loopexit:                                     ; preds = %bb4.us
  br label %bb6, !dbg !30

bb6.loopexit23:                                   ; preds = %bb4
  br label %bb6, !dbg !30

bb6:                                              ; preds = %bb6.loopexit23, %bb6.loopexit, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb6.loopexit ], [ %6, %bb6.loopexit23 ], !dbg !31
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb6.loopexit ], [ 3, %bb6.loopexit23 ], !dbg !32
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !30
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6.loopexit23, label %bb4, !dbg !17
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !17

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %6, %bb4 ], !dbg !30
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb4.us ], [ 3, %bb4 ], !dbg !31
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !32
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6, label %bb4, !dbg !17
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !17

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %6, %bb4 ], !dbg !30
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb4.us ], [ 3, %bb4 ], !dbg !31
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !32
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6, label %bb4, !dbg !17
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !17

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %6, %bb4 ], !dbg !30
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb4.us ], [ 3, %bb4 ], !dbg !31
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !32
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6, label %bb4, !dbg !17
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !17

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %6, %bb4 ], !dbg !30
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb4.us ], [ 3, %bb4 ], !dbg !31
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !32
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6, label %bb4, !dbg !17
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !17

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %6, %bb4 ], !dbg !30
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb4.us ], [ 3, %bb4 ], !dbg !31
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !32
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6, label %bb4, !dbg !17
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !17

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %6, %bb4 ], !dbg !30
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb4.us ], [ 3, %bb4 ], !dbg !31
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !32
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6, label %bb4, !dbg !17
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nosync nounwind nonlazybind uwtable
define noundef i32 @_ZN7example3foo17hda9c57ed47971229E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %v) unnamed_addr #1 !dbg !13 {
start:
  %0 = getelementptr i8, ptr %v, i64 16, !dbg !14
  %v.val5 = load i64, ptr %0, align 8, !dbg !14, !noundef !10
  %_10.i8 = icmp eq i64 %v.val5, 0, !dbg !17
  br i1 %_10.i8, label %bb6, label %bb4.lr.ph, !dbg !17

bb4.lr.ph:                                        ; preds = %start
  %_10 = and i64 %v.val5, 1
  %1 = icmp eq i64 %_10, 0
  br i1 %1, label %bb4.us.preheader, label %bb4.preheader, !dbg !27

bb4.preheader:                                    ; preds = %bb4.lr.ph
  %2 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4, !dbg !17

bb4.us.preheader:                                 ; preds = %bb4.lr.ph
  %3 = shl i64 %v.val5, 2, !dbg !17
  br label %bb4.us, !dbg !17

bb4.us:                                           ; preds = %bb4.us.preheader, %bb4.us
  %lsr.iv = phi i64 [ %3, %bb4.us.preheader ], [ %lsr.iv.next, %bb4.us ]
  %s.011.us = phi i32 [ %4, %bb4.us ], [ 3, %bb4.us.preheader ]
  %4 = shl i32 %s.011.us, 1, !dbg !29
  %lsr.iv.next = add i64 %lsr.iv, -4, !dbg !17
  %lsr.iv.next24 = inttoptr i64 %lsr.iv.next to ptr, !dbg !17
  %_10.i.us = icmp eq ptr %lsr.iv.next24, null, !dbg !17
  br i1 %_10.i.us, label %bb6, label %bb4.us, !dbg !17

bb6:                                              ; preds = %bb4, %bb4.us, %start
  %d.0.lcssa = phi i32 [ 3, %start ], [ 3, %bb4.us ], [ %6, %bb4 ], !dbg !30
  %s.0.lcssa = phi i32 [ 3, %start ], [ %4, %bb4.us ], [ 3, %bb4 ], !dbg !31
  %5 = mul i32 %s.0.lcssa, %d.0.lcssa, !dbg !32
  ret i32 %5, !dbg !33

bb4:                                              ; preds = %bb4.preheader, %bb4
  %lsr.iv25 = phi i64 [ %2, %bb4.preheader ], [ %lsr.iv.next26, %bb4 ]
  %d.010 = phi i32 [ %6, %bb4 ], [ 3, %bb4.preheader ]
  %_15 = mul i32 %d.010, 23, !dbg !34
  %_14 = sdiv i32 %_15, 80, !dbg !34
  %_13 = add i32 %d.010, 3, !dbg !35
  %6 = add i32 %_13, %_14, !dbg !36
  %lsr.iv.next26 = add i64 %lsr.iv25, -4, !dbg !17
  %lsr.iv.next2627 = inttoptr i64 %lsr.iv.next26 to ptr, !dbg !17
  %_10.i = icmp eq ptr %lsr.iv.next2627, null, !dbg !17
  br i1 %_10.i, label %bb6, label %bb4, !dbg !17
}
# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  %14:gr32 = MOV32ri 3
64B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
80B	  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
96B	  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

112B	bb.1.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

128B	  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
144B	  TEST8ri killed %15:gr8, 1, implicit-def $eflags
160B	  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
176B	  JMP_1 %bb.2, debug-location !27; example.rs:9:12

192B	bb.2.bb4.preheader:
	; predecessors: %bb.1
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

208B	  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
224B	  %16:gr32 = MOV32ri 3
240B	  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

256B	bb.3.bb4.us.preheader:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

272B	  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %32:gr32 = MOV32ri 3

304B	bb.4.bb4.us:
	; predecessors: %bb.3, %bb.4
	  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

320B	  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
336B	  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
352B	  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
368B	  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
384B	  %33:gr32 = MOV32ri 3
400B	  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
416B	  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

432B	bb.5.bb6:
	; predecessors: %bb.0, %bb.6, %bb.4

448B	  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
464B	  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
480B	  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
496B	  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
512B	  RET 0, $eax, debug-location !33; example.rs:16:2

528B	bb.6.bb4:
	; predecessors: %bb.2, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

544B	  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
560B	  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
576B	  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
592B	  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
608B	  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
624B	  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
640B	  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
656B	  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
672B	  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
688B	  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
704B	  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
720B	  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
736B	  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
752B	  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
768B	  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
784B	  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
800B	  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
816B	  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
832B	  %17:gr32 = MOV32ri 3
848B	  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
864B	  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  %14:gr32 = MOV32ri 3
64B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
80B	  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
96B	  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

112B	bb.1.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

128B	  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
144B	  TEST8ri killed %15:gr8, 1, implicit-def $eflags
160B	  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
176B	  JMP_1 %bb.2, debug-location !27; example.rs:9:12

192B	bb.2.bb4.preheader:
	; predecessors: %bb.1
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

208B	  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
224B	  %16:gr32 = MOV32ri 3
240B	  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

256B	bb.3.bb4.us.preheader:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

272B	  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %32:gr32 = MOV32ri 3

304B	bb.4.bb4.us:
	; predecessors: %bb.3, %bb.4
	  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

320B	  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
336B	  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
352B	  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
368B	  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
384B	  %33:gr32 = MOV32ri 3
400B	  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
416B	  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

432B	bb.5.bb6:
	; predecessors: %bb.0, %bb.6, %bb.4

448B	  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
464B	  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
480B	  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
496B	  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
512B	  RET 0, $eax, debug-location !33; example.rs:16:2

528B	bb.6.bb4:
	; predecessors: %bb.2, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

544B	  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
560B	  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
576B	  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
592B	  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
608B	  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
624B	  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
640B	  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
656B	  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
672B	  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
688B	  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
704B	  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
720B	  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
736B	  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
752B	  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
768B	  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
784B	  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
800B	  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
816B	  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
832B	  %17:gr32 = MOV32ri 3
848B	  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
864B	  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %19:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %31:gr64 = IMPLICIT_DEF debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %33:gr32 = MOV32ri 3
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %33:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %17:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %17:gr32 = MOV32ri 3
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.5(0x30000000), %bb.1(0x50000000); %bb.5(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  %14:gr32 = MOV32ri 3
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.1, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.0, %bb.6, %bb.4

  %7:gr32 = PHI %14:gr32, %bb.0, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.0, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %19:gr64 = IMPLICIT_DEF
  %31:gr64 = IMPLICIT_DEF
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.7(0x30000000), %bb.1(0x50000000); %bb.7(37.50%), %bb.1(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.5

bb.1.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.3, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.2, debug-location !27; example.rs:9:12

bb.2.bb4.preheader:
; predecessors: %bb.1
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.3.bb4.us.preheader:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.4.bb4.us:
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.3, %6:gr64, %bb.4
  %4:gr32 = PHI %32:gr32, %bb.3, %5:gr32, %bb.4
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.5, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.5.bb6:
; predecessors: %bb.6, %bb.4, %bb.7

  %7:gr32 = PHI %14:gr32, %bb.7, %11:gr32, %bb.6, %32:gr32, %bb.4, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.7, %16:gr32, %bb.6, %5:gr32, %bb.4, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.6.bb4:
; predecessors: %bb.2, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.2, %12:gr64, %bb.6
  %10:gr32 = PHI %16:gr32, %bb.2, %11:gr32, %bb.6
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.4, %6:gr64, %bb.5
  %4:gr32 = PHI %32:gr32, %bb.4, %5:gr32, %bb.5
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.6.bb6:
; predecessors: %bb.7, %bb.5, %bb.1

  %7:gr32 = PHI %14:gr32, %bb.1, %11:gr32, %bb.7, %32:gr32, %bb.5, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.1, %16:gr32, %bb.7, %5:gr32, %bb.5, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.3, %12:gr64, %bb.7
  %10:gr32 = PHI %16:gr32, %bb.3, %11:gr32, %bb.7
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY $rdi
  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64 = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.4, %6:gr64, %bb.5
  %4:gr32 = PHI %32:gr32, %bb.4, %5:gr32, %bb.5
  %5:gr32 = ADD32rr %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.6.bb6:
; predecessors: %bb.7, %bb.5, %bb.1

  %7:gr32 = PHI %14:gr32, %bb.1, %11:gr32, %bb.7, %32:gr32, %bb.5, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.1, %16:gr32, %bb.7, %5:gr32, %bb.5, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr %8:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.3, %12:gr64, %bb.7
  %10:gr32 = PHI %16:gr32, %bb.3, %11:gr32, %bb.7
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %21:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY killed $rdi
  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.4, %6:gr64, %bb.5
  %4:gr32 = PHI %32:gr32, %bb.4, %5:gr32, %bb.5
  %5:gr32 = ADD32rr killed %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 killed %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.6.bb6:
; predecessors: %bb.7, %bb.5, %bb.1

  %7:gr32 = PHI %14:gr32, %bb.1, %11:gr32, %bb.7, %32:gr32, %bb.5, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.1, %16:gr32, %bb.7, %5:gr32, %bb.5, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr killed %8:gr32(tied-def 0), killed %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
  RET 0, killed $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.3, %12:gr64, %bb.7
  %10:gr32 = PHI %16:gr32, %bb.3, %11:gr32, %bb.7
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri killed %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr killed %21:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri killed %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr killed %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 killed %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: IsSSA, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY killed $rdi
  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)

  %3:gr64 = PHI %2:gr64, %bb.4, %6:gr64, %bb.5
  %4:gr32 = PHI %32:gr32, %bb.4, %5:gr32, %bb.5
  %5:gr32 = ADD32rr killed %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 killed %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.6, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.6.bb6:
; predecessors: %bb.7, %bb.5, %bb.1

  %7:gr32 = PHI %14:gr32, %bb.1, %11:gr32, %bb.7, %32:gr32, %bb.5, debug-location !30; example.rs:7:17
  %8:gr32 = PHI %14:gr32, %bb.1, %16:gr32, %bb.7, %5:gr32, %bb.5, debug-location !31; example.rs:0
  %34:gr32 = IMUL32rr killed %8:gr32(tied-def 0), killed %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
  RET 0, killed $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %9:gr64 = PHI %1:gr64, %bb.3, %12:gr64, %bb.7
  %10:gr32 = PHI %16:gr32, %bb.3, %11:gr32, %bb.7
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri killed %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr killed %21:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri killed %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr killed %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 killed %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY killed $rdi
  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  %37:gr32 = COPY %14:gr32
  %38:gr32 = COPY killed %14:gr32
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %39:gr64 = COPY killed %1:gr64
  %40:gr32 = COPY %16:gr32
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3
  %35:gr64 = COPY killed %2:gr64
  %36:gr32 = COPY %32:gr32

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

  %4:gr32 = COPY killed %36:gr32
  %3:gr64 = COPY killed %35:gr64
  %5:gr32 = ADD32rr killed %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 killed %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %35:gr64 = COPY killed %6:gr64
  %36:gr32 = COPY %5:gr32
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %32:gr32
  %38:gr32 = COPY killed %5:gr32

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9

  %8:gr32 = COPY killed %38:gr32, debug-location !31; example.rs:0
  %7:gr32 = COPY killed %37:gr32, debug-location !30; example.rs:7:17
  %34:gr32 = IMUL32rr killed %8:gr32(tied-def 0), killed %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
  RET 0, killed $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

  %10:gr32 = COPY killed %40:gr32
  %9:gr64 = COPY killed %39:gr64
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri killed %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr killed %21:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri killed %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr killed %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 killed %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %39:gr64 = COPY killed %12:gr64
  %40:gr32 = COPY %11:gr32
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %11:gr32
  %38:gr32 = COPY killed %16:gr32
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY killed $rdi
  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  %37:gr32 = COPY %14:gr32
  %38:gr32 = COPY killed %14:gr32
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %39:gr64 = COPY killed %1:gr64
  %40:gr32 = COPY %16:gr32
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64 = SHL64ri killed %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3
  %35:gr64 = COPY killed %2:gr64
  %36:gr32 = COPY %32:gr32

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

  %4:gr32 = COPY killed %36:gr32
  %3:gr64 = COPY killed %35:gr64
  %5:gr32 = ADD32rr killed %4:gr32(tied-def 0), %4:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = ADD64ri8 killed %3:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %35:gr64 = COPY killed %6:gr64
  %36:gr32 = COPY %5:gr32
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %32:gr32
  %38:gr32 = COPY killed %5:gr32

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9

  %8:gr32 = COPY killed %38:gr32, debug-location !31; example.rs:0
  %7:gr32 = COPY killed %37:gr32, debug-location !30; example.rs:7:17
  %34:gr32 = IMUL32rr killed %8:gr32(tied-def 0), killed %7:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
  RET 0, killed $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

  %10:gr32 = COPY killed %40:gr32
  %9:gr64 = COPY killed %39:gr64
  %18:gr64_nosp = INSERT_SUBREG undef %19:gr64(tied-def 0), %10:gr32, %subreg.sub_32bit, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri killed %20:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr killed %21:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %24:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri killed %24:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr killed %28:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %30:gr64_nosp = INSERT_SUBREG undef %31:gr64(tied-def 0), killed %29:gr32, %subreg.sub_32bit, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = ADD64ri8 killed %9:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %39:gr64 = COPY killed %12:gr64
  %40:gr32 = COPY %11:gr32
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %11:gr32
  %38:gr32 = COPY killed %16:gr32
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY killed $rdi
  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  %37:gr32 = COPY %14:gr32
  %38:gr32 = COPY killed %14:gr32
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %1:gr64_with_sub_8bit = SHL64ri %1:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %39:gr64 = COPY killed %1:gr64_with_sub_8bit
  %40:gr32 = COPY %16:gr32
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %2:gr64_with_sub_8bit = SHL64ri %2:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3
  %35:gr64 = COPY killed %2:gr64_with_sub_8bit
  %36:gr32 = COPY %32:gr32

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

  %4:gr32 = COPY killed %36:gr32
  %3:gr64 = COPY killed %35:gr64
  %5:gr32 = COPY killed %4:gr32, debug-location !29; example.rs:10:13
  %5:gr32 = ADD32rr %5:gr32(tied-def 0), %5:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = COPY killed %3:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %6:gr64 = ADD64ri8 %6:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %35:gr64 = COPY killed %6:gr64
  %36:gr32 = COPY %5:gr32
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %32:gr32
  %38:gr32 = COPY killed %5:gr32

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9

  %8:gr32 = COPY killed %38:gr32, debug-location !31; example.rs:0
  %7:gr32 = COPY killed %37:gr32, debug-location !30; example.rs:7:17
  %34:gr32 = COPY killed %7:gr32, debug-location !32; example.rs:15:5
  %34:gr32 = IMUL32rr %34:gr32(tied-def 0), killed %8:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
  RET 0, killed $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

  %10:gr32 = COPY killed %40:gr32
  %9:gr64 = COPY killed %39:gr64
  undef %18.sub_32bit:gr64_nosp = COPY %10:gr32, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = COPY killed %20:gr32, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %21:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = COPY killed %21:gr32, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %22:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %25:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = COPY killed %24:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %27:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = COPY killed %28:gr32, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %29:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  undef %30.sub_32bit:gr64_nosp = COPY killed %29:gr32, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = COPY killed %9:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %12:gr64 = ADD64ri8 %12:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %39:gr64 = COPY killed %12:gr64
  %40:gr32 = COPY %11:gr32
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %11:gr32
  %38:gr32 = COPY killed %16:gr32
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  %13:gr64 = COPY killed $rdi
  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %14:gr32 = MOV32ri 3
  %37:gr32 = COPY %14:gr32
  %38:gr32 = COPY killed %14:gr32
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
  TEST8ri killed %15:gr8, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %1:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %1:gr64_with_sub_8bit = SHL64ri %1:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %16:gr32 = MOV32ri 3
  %39:gr64 = COPY killed %1:gr64_with_sub_8bit
  %40:gr32 = COPY %16:gr32
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %2:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %2:gr64_with_sub_8bit = SHL64ri %2:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %32:gr32 = MOV32ri 3
  %35:gr64 = COPY killed %2:gr64_with_sub_8bit
  %36:gr32 = COPY %32:gr32

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

  %4:gr32 = COPY killed %36:gr32
  %3:gr64 = COPY killed %35:gr64
  %5:gr32 = COPY killed %4:gr32, debug-location !29; example.rs:10:13
  %5:gr32 = ADD32rr %5:gr32(tied-def 0), %5:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  %6:gr64 = COPY killed %3:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %6:gr64 = ADD64ri8 %6:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %35:gr64 = COPY killed %6:gr64
  %36:gr32 = COPY %5:gr32
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %32:gr32
  %38:gr32 = COPY killed %5:gr32

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9

  %8:gr32 = COPY killed %38:gr32, debug-location !31; example.rs:0
  %7:gr32 = COPY killed %37:gr32, debug-location !30; example.rs:7:17
  %34:gr32 = COPY killed %7:gr32, debug-location !32; example.rs:15:5
  %34:gr32 = IMUL32rr %34:gr32(tied-def 0), killed %8:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
  RET 0, killed $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

  %10:gr32 = COPY killed %40:gr32
  %9:gr64 = COPY killed %39:gr64
  undef %18.sub_32bit:gr64_nosp = COPY %10:gr32, debug-location !34; example.rs:12:22
  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
  %21:gr32 = COPY killed %20:gr32, debug-location !34; example.rs:12:22
  %21:gr32 = SHL32ri %21:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %22:gr32 = COPY killed %21:gr32, debug-location !34; example.rs:12:22
  %22:gr32 = SUB32rr %22:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %25:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
  %25:gr64 = SHR64ri %25:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = COPY killed %24:gr64, debug-location !34; example.rs:12:22
  %27:gr64 = SAR64ri %27:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
  %29:gr32 = COPY killed %28:gr32, debug-location !34; example.rs:12:22
  %29:gr32 = ADD32rr %29:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  undef %30.sub_32bit:gr64_nosp = COPY killed %29:gr32, debug-location !36; example.rs:12:13
  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
  %12:gr64 = COPY killed %9:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %12:gr64 = ADD64ri8 %12:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  %39:gr64 = COPY killed %12:gr64
  %40:gr32 = COPY %11:gr32
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %37:gr32 = COPY killed %11:gr32
  %38:gr32 = COPY killed %16:gr32
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY killed $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  %14:gr32 = MOV32ri 3
112B	  %37:gr32 = COPY %14:gr32
128B	  %38:gr32 = COPY killed %14:gr32
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

176B	  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
192B	  TEST8ri killed %15:gr8, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

256B	  %1:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
272B	  %1:gr64_with_sub_8bit = SHL64ri %1:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %16:gr32 = MOV32ri 3
304B	  %39:gr64 = COPY killed %1:gr64_with_sub_8bit
320B	  %40:gr32 = COPY %16:gr32
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

368B	  %2:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
384B	  %2:gr64_with_sub_8bit = SHL64ri %2:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  %32:gr32 = MOV32ri 3
416B	  %35:gr64 = COPY killed %2:gr64_with_sub_8bit
432B	  %36:gr32 = COPY %32:gr32

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

464B	  %4:gr32 = COPY killed %36:gr32
480B	  %3:gr64 = COPY killed %35:gr64
496B	  %5:gr32 = COPY killed %4:gr32, debug-location !29; example.rs:10:13
512B	  %5:gr32 = ADD32rr %5:gr32(tied-def 0), %5:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
528B	  %6:gr64 = COPY killed %3:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
544B	  %6:gr64 = ADD64ri8 %6:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
560B	  %35:gr64 = COPY killed %6:gr64
576B	  %36:gr32 = COPY %5:gr32
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

624B	  %37:gr32 = COPY killed %32:gr32
640B	  %38:gr32 = COPY killed %5:gr32

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

672B	  %8:gr32 = COPY killed %38:gr32, debug-location !31; example.rs:0
688B	  %7:gr32 = COPY killed %37:gr32, debug-location !30; example.rs:7:17
704B	  %34:gr32 = COPY killed %7:gr32, debug-location !32; example.rs:15:5
720B	  %34:gr32 = IMUL32rr %34:gr32(tied-def 0), killed %8:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

784B	  %10:gr32 = COPY killed %40:gr32
800B	  %9:gr64 = COPY killed %39:gr64
816B	  undef %18.sub_32bit:gr64_nosp = COPY %10:gr32, debug-location !34; example.rs:12:22
832B	  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
848B	  %21:gr32 = COPY killed %20:gr32, debug-location !34; example.rs:12:22
864B	  %21:gr32 = SHL32ri %21:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
880B	  %22:gr32 = COPY killed %21:gr32, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
928B	  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
960B	  %25:gr64 = SHR64ri %25:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
976B	  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
992B	  %27:gr64 = COPY killed %24:gr64, debug-location !34; example.rs:12:22
1008B	  %27:gr64 = SAR64ri %27:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1024B	  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
1040B	  %29:gr32 = COPY killed %28:gr32, debug-location !34; example.rs:12:22
1056B	  %29:gr32 = ADD32rr %29:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1072B	  undef %30.sub_32bit:gr64_nosp = COPY killed %29:gr32, debug-location !36; example.rs:12:13
1088B	  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1104B	  %12:gr64 = COPY killed %9:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1120B	  %12:gr64 = ADD64ri8 %12:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1136B	  %39:gr64 = COPY killed %12:gr64
1152B	  %40:gr32 = COPY %11:gr32
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1200B	  %37:gr32 = COPY killed %11:gr32
1216B	  %38:gr32 = COPY killed %16:gr32
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY killed $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm killed %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  %14:gr32 = MOV32ri 3
112B	  %37:gr32 = COPY %14:gr32
128B	  %38:gr32 = COPY killed %14:gr32
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

176B	  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
192B	  TEST8ri killed %15:gr8, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

256B	  %1:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
272B	  %1:gr64_with_sub_8bit = SHL64ri %1:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %16:gr32 = MOV32ri 3
304B	  %39:gr64 = COPY killed %1:gr64_with_sub_8bit
320B	  %40:gr32 = COPY %16:gr32
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

368B	  %2:gr64_with_sub_8bit = COPY killed %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
384B	  %2:gr64_with_sub_8bit = SHL64ri %2:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  %32:gr32 = MOV32ri 3
416B	  %35:gr64 = COPY killed %2:gr64_with_sub_8bit
432B	  %36:gr32 = COPY %32:gr32

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

464B	  %4:gr32 = COPY killed %36:gr32
480B	  %3:gr64 = COPY killed %35:gr64
496B	  %5:gr32 = COPY killed %4:gr32, debug-location !29; example.rs:10:13
512B	  %5:gr32 = ADD32rr %5:gr32(tied-def 0), %5:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
528B	  %6:gr64 = COPY killed %3:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
544B	  %6:gr64 = ADD64ri8 %6:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
560B	  %35:gr64 = COPY killed %6:gr64
576B	  %36:gr32 = COPY %5:gr32
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

624B	  %37:gr32 = COPY killed %32:gr32
640B	  %38:gr32 = COPY killed %5:gr32

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

672B	  %8:gr32 = COPY killed %38:gr32, debug-location !31; example.rs:0
688B	  %7:gr32 = COPY killed %37:gr32, debug-location !30; example.rs:7:17
704B	  %34:gr32 = COPY killed %7:gr32, debug-location !32; example.rs:15:5
720B	  %34:gr32 = IMUL32rr %34:gr32(tied-def 0), killed %8:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY killed %34:gr32, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

784B	  %10:gr32 = COPY killed %40:gr32
800B	  %9:gr64 = COPY killed %39:gr64
816B	  undef %18.sub_32bit:gr64_nosp = COPY %10:gr32, debug-location !34; example.rs:12:22
832B	  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
848B	  %21:gr32 = COPY killed %20:gr32, debug-location !34; example.rs:12:22
864B	  %21:gr32 = SHL32ri %21:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
880B	  %22:gr32 = COPY killed %21:gr32, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), killed %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 killed %22:gr32, debug-location !34; example.rs:12:22
928B	  %24:gr64 = IMUL64rri32 killed %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
960B	  %25:gr64 = SHR64ri %25:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
976B	  %26:gr32 = COPY killed %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
992B	  %27:gr64 = COPY killed %24:gr64, debug-location !34; example.rs:12:22
1008B	  %27:gr64 = SAR64ri %27:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1024B	  %28:gr32 = COPY killed %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
1040B	  %29:gr32 = COPY killed %28:gr32, debug-location !34; example.rs:12:22
1056B	  %29:gr32 = ADD32rr %29:gr32(tied-def 0), killed %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1072B	  undef %30.sub_32bit:gr64_nosp = COPY killed %29:gr32, debug-location !36; example.rs:12:13
1088B	  %11:gr32 = LEA64_32r killed %18:gr64_nosp, 1, killed %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1104B	  %12:gr64 = COPY killed %9:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1120B	  %12:gr64 = ADD64ri8 %12:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1136B	  %39:gr64 = COPY killed %12:gr64
1152B	  %40:gr32 = COPY %11:gr32
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1200B	  %37:gr32 = COPY killed %11:gr32
1216B	  %38:gr32 = COPY killed %16:gr32
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  %14:gr32 = MOV32ri 3
112B	  %37:gr32 = COPY %14:gr32
128B	  %38:gr32 = COPY %14:gr32
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

176B	  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
192B	  TEST8ri %15:gr8, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

256B	  %1:gr64_with_sub_8bit = COPY %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
272B	  %1:gr64_with_sub_8bit = SHL64ri %1:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %16:gr32 = MOV32ri 3
304B	  %39:gr64 = COPY %1:gr64_with_sub_8bit
320B	  %40:gr32 = COPY %16:gr32
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

368B	  %2:gr64_with_sub_8bit = COPY %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
384B	  %2:gr64_with_sub_8bit = SHL64ri %2:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  %32:gr32 = MOV32ri 3
416B	  %35:gr64 = COPY %2:gr64_with_sub_8bit
432B	  %36:gr32 = COPY %32:gr32

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

464B	  %4:gr32 = COPY %36:gr32
480B	  %3:gr64 = COPY %35:gr64
496B	  %5:gr32 = COPY %4:gr32, debug-location !29; example.rs:10:13
512B	  %5:gr32 = ADD32rr %5:gr32(tied-def 0), %5:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
528B	  %6:gr64 = COPY %3:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
544B	  %6:gr64 = ADD64ri8 %6:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
560B	  %35:gr64 = COPY %6:gr64
576B	  %36:gr32 = COPY %5:gr32
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

624B	  %37:gr32 = COPY %32:gr32
640B	  %38:gr32 = COPY %5:gr32

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

672B	  %8:gr32 = COPY %38:gr32, debug-location !31; example.rs:0
688B	  %7:gr32 = COPY %37:gr32, debug-location !30; example.rs:7:17
704B	  %34:gr32 = COPY %7:gr32, debug-location !32; example.rs:15:5
720B	  %34:gr32 = IMUL32rr %34:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

784B	  %10:gr32 = COPY %40:gr32
800B	  %9:gr64 = COPY %39:gr64
816B	  undef %18.sub_32bit:gr64_nosp = COPY %10:gr32, debug-location !34; example.rs:12:22
832B	  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
848B	  %21:gr32 = COPY %20:gr32, debug-location !34; example.rs:12:22
864B	  %21:gr32 = SHL32ri %21:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
880B	  %22:gr32 = COPY %21:gr32, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %24:gr64 = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
960B	  %25:gr64 = SHR64ri %25:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
976B	  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
992B	  %27:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
1008B	  %27:gr64 = SAR64ri %27:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1024B	  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
1040B	  %29:gr32 = COPY %28:gr32, debug-location !34; example.rs:12:22
1056B	  %29:gr32 = ADD32rr %29:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1072B	  undef %30.sub_32bit:gr64_nosp = COPY %29:gr32, debug-location !36; example.rs:12:13
1088B	  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1104B	  %12:gr64 = COPY %9:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1120B	  %12:gr64 = ADD64ri8 %12:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1136B	  %39:gr64 = COPY %12:gr64
1152B	  %40:gr32 = COPY %11:gr32
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1200B	  %37:gr32 = COPY %11:gr32
1216B	  %38:gr32 = COPY %16:gr32
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  %14:gr32 = MOV32ri 3
112B	  %37:gr32 = COPY %14:gr32
128B	  %38:gr32 = COPY %14:gr32
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

176B	  %15:gr8 = COPY %0.sub_8bit:gr64_with_sub_8bit
192B	  TEST8ri %15:gr8, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

256B	  %1:gr64_with_sub_8bit = COPY %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
272B	  %1:gr64_with_sub_8bit = SHL64ri %1:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %16:gr32 = MOV32ri 3
304B	  %39:gr64 = COPY %1:gr64_with_sub_8bit
320B	  %40:gr32 = COPY %16:gr32
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

368B	  %2:gr64_with_sub_8bit = COPY %0:gr64_with_sub_8bit, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
384B	  %2:gr64_with_sub_8bit = SHL64ri %2:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  %32:gr32 = MOV32ri 3
416B	  %35:gr64 = COPY %2:gr64_with_sub_8bit
432B	  %36:gr32 = COPY %32:gr32

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

464B	  %4:gr32 = COPY %36:gr32
480B	  %3:gr64 = COPY %35:gr64
496B	  %5:gr32 = COPY %4:gr32, debug-location !29; example.rs:10:13
512B	  %5:gr32 = ADD32rr %5:gr32(tied-def 0), %5:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
528B	  %6:gr64 = COPY %3:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
544B	  %6:gr64 = ADD64ri8 %6:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
560B	  %35:gr64 = COPY %6:gr64
576B	  %36:gr32 = COPY %5:gr32
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

624B	  %37:gr32 = COPY %32:gr32
640B	  %38:gr32 = COPY %5:gr32

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

672B	  %8:gr32 = COPY %38:gr32, debug-location !31; example.rs:0
688B	  %7:gr32 = COPY %37:gr32, debug-location !30; example.rs:7:17
704B	  %34:gr32 = COPY %7:gr32, debug-location !32; example.rs:15:5
720B	  %34:gr32 = IMUL32rr %34:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %34:gr32, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

784B	  %10:gr32 = COPY %40:gr32
800B	  %9:gr64 = COPY %39:gr64
816B	  undef %18.sub_32bit:gr64_nosp = COPY %10:gr32, debug-location !34; example.rs:12:22
832B	  %20:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
848B	  %21:gr32 = COPY %20:gr32, debug-location !34; example.rs:12:22
864B	  %21:gr32 = SHL32ri %21:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
880B	  %22:gr32 = COPY %21:gr32, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %10:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %24:gr64 = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
960B	  %25:gr64 = SHR64ri %25:gr64(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
976B	  %26:gr32 = COPY %25.sub_32bit:gr64, debug-location !34; example.rs:12:22
992B	  %27:gr64 = COPY %24:gr64, debug-location !34; example.rs:12:22
1008B	  %27:gr64 = SAR64ri %27:gr64(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1024B	  %28:gr32 = COPY %27.sub_32bit:gr64, debug-location !34; example.rs:12:22
1040B	  %29:gr32 = COPY %28:gr32, debug-location !34; example.rs:12:22
1056B	  %29:gr32 = ADD32rr %29:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1072B	  undef %30.sub_32bit:gr64_nosp = COPY %29:gr32, debug-location !36; example.rs:12:13
1088B	  %11:gr32 = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1104B	  %12:gr64 = COPY %9:gr64, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1120B	  %12:gr64 = ADD64ri8 %12:gr64(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1136B	  %39:gr64 = COPY %12:gr64
1152B	  %40:gr32 = COPY %11:gr32
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1200B	  %37:gr32 = COPY %11:gr32
1216B	  %38:gr32 = COPY %16:gr32
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, killed $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi in %13

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
16B	  %13:gr64 = COPY $rdi
32B	  %0:gr64_with_sub_8bit = MOV64rm %13:gr64, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr %0:gr64_with_sub_8bit, %0:gr64_with_sub_8bit, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
128B	  %38:gr32 = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)

192B	  TEST8ri %0.sub_8bit:gr64_with_sub_8bit, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

272B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  %38:gr32 = MOV32ri 3
320B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

384B	  %0:gr64_with_sub_8bit = SHL64ri %0:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  undef %18.sub_32bit:gr64_nosp = MOV32ri 3
432B	  %38:gr32 = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)

512B	  %38:gr32 = ADD32rr %38:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)


656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9

720B	  %18.sub_32bit:gr64_nosp = IMUL32rr %18.sub_32bit:gr64_nosp(tied-def 0), %38:gr32, implicit-def dead $eflags, debug-location !32; example.rs:15:5
736B	  $eax = COPY %18.sub_32bit:gr64_nosp, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)

832B	  %22:gr32 = LEA64_32r %18:gr64_nosp, 2, %18:gr64_nosp, 0, $noreg, debug-location !34; example.rs:12:22
864B	  %22:gr32 = SHL32ri %22:gr32(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  %22:gr32 = SUB32rr %22:gr32(tied-def 0), %18.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  %23:gr64 = MOVSX64rr32 %22:gr32, debug-location !34; example.rs:12:22
928B	  %30:gr64_nosp = IMUL64rri32 %23:gr64, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  %25:gr64_with_sub_8bit = COPY %30:gr64_nosp, debug-location !34; example.rs:12:22
960B	  %25:gr64_with_sub_8bit = SHR64ri %25:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  %30:gr64_nosp = SAR64ri %30:gr64_nosp(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  %30.sub_32bit:gr64_nosp = ADD32rr %30.sub_32bit:gr64_nosp(tied-def 0), %25.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1088B	  %18.sub_32bit:gr64_nosp = LEA64_32r %18:gr64_nosp, 1, %30:gr64_nosp, 3, $noreg, debug-location !36; example.rs:12:13
1120B	  %0:gr64_with_sub_8bit = ADD64ri8 %0:gr64_with_sub_8bit(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
32B	  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  renamable $eax = MOV32ri 3, implicit-def $rax
128B	  renamable $edx = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
	  liveins: $rcx
192B	  TEST8ri renamable $cl, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $rcx
272B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  renamable $edx = MOV32ri 3
320B	  renamable $eax = MOV32ri 3, implicit-def $rax
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)
	  liveins: $rcx
384B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  renamable $eax = MOV32ri 3, implicit-def $rax
432B	  renamable $edx = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
	  liveins: $edx, $rax, $rcx
512B	  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9
	  liveins: $edx, $rax
720B	  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
736B	  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
	  liveins: $edx, $rax, $rcx
832B	  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
864B	  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
928B	  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
960B	  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
1088B	  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
1120B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
32B	  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  renamable $eax = MOV32ri 3, implicit-def $rax
128B	  renamable $edx = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
	  liveins: $rcx
192B	  TEST8ri renamable $cl, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $rcx
272B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  renamable $edx = MOV32ri 3
320B	  renamable $eax = MOV32ri 3, implicit-def $rax
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)
	  liveins: $rcx
384B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  renamable $eax = MOV32ri 3, implicit-def $rax
432B	  renamable $edx = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
	  liveins: $edx, $rax, $rcx
512B	  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9
	  liveins: $edx, $rax
720B	  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
736B	  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
	  liveins: $edx, $rax, $rcx
832B	  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
864B	  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
928B	  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
960B	  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
1088B	  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
1120B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
32B	  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  renamable $eax = MOV32ri 3, implicit-def $rax
128B	  renamable $edx = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
	  liveins: $rcx
192B	  TEST8ri renamable $cl, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $rcx
272B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  renamable $edx = MOV32ri 3
320B	  renamable $eax = MOV32ri 3, implicit-def $rax
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)
	  liveins: $rcx
384B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  renamable $eax = MOV32ri 3, implicit-def $rax
432B	  renamable $edx = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
	  liveins: $edx, $rax, $rcx
512B	  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9
	  liveins: $edx, $rax
720B	  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
736B	  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
	  liveins: $edx, $rax, $rcx
832B	  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
864B	  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
928B	  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
960B	  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
1088B	  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
1120B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
32B	  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  renamable $eax = MOV32ri 3, implicit-def $rax
128B	  renamable $edx = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
	  liveins: $rcx
192B	  TEST8ri renamable $cl, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $rcx
272B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  renamable $edx = MOV32ri 3
320B	  renamable $eax = MOV32ri 3, implicit-def $rax
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)
	  liveins: $rcx
384B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  renamable $eax = MOV32ri 3, implicit-def $rax
432B	  renamable $edx = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
	  liveins: $edx, $rax, $rcx
512B	  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9
	  liveins: $edx, $rax
720B	  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
736B	  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
	  liveins: $edx, $rax, $rcx
832B	  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
864B	  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
928B	  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
960B	  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
1088B	  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
1120B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
32B	  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  renamable $eax = MOV32ri 3, implicit-def $rax
128B	  renamable $edx = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
	  liveins: $rcx
192B	  TEST8ri renamable $cl, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $rcx
272B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  renamable $edx = MOV32ri 3
320B	  renamable $eax = MOV32ri 3, implicit-def $rax
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)
	  liveins: $rcx
384B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  renamable $eax = MOV32ri 3, implicit-def $rax
432B	  renamable $edx = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
	  liveins: $edx, $rax, $rcx
512B	  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9
	  liveins: $edx, $rax
720B	  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
736B	  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
	  liveins: $edx, $rax, $rcx
832B	  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
864B	  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
928B	  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
960B	  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
1088B	  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
1120B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

0B	bb.0.start:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdi
32B	  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
48B	  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
64B	  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

80B	bb.1:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

96B	  renamable $eax = MOV32ri 3, implicit-def $rax
128B	  renamable $edx = MOV32ri 3
144B	  JMP_1 %bb.6

160B	bb.2.bb4.lr.ph:
	; predecessors: %bb.0
	  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
	  liveins: $rcx
192B	  TEST8ri renamable $cl, 1, implicit-def $eflags
208B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
224B	  JMP_1 %bb.3, debug-location !27; example.rs:9:12

240B	bb.3.bb4.preheader:
	; predecessors: %bb.2
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $rcx
272B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
288B	  renamable $edx = MOV32ri 3
320B	  renamable $eax = MOV32ri 3, implicit-def $rax
336B	  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

352B	bb.4.bb4.us.preheader:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)
	  liveins: $rcx
384B	  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
400B	  renamable $eax = MOV32ri 3, implicit-def $rax
432B	  renamable $edx = MOV32ri 3

448B	bb.5.bb4.us:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
	  liveins: $edx, $rax, $rcx
512B	  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
544B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
592B	  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

608B	bb.8:
	; predecessors: %bb.5
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax

656B	bb.6.bb6:
	; predecessors: %bb.1, %bb.8, %bb.9
	  liveins: $edx, $rax
720B	  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
736B	  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
752B	  RET 0, $eax, debug-location !33; example.rs:16:2

768B	bb.7.bb4:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
	  liveins: $edx, $rax, $rcx
832B	  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
864B	  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
896B	  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
912B	  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
928B	  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
944B	  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
960B	  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1008B	  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
1056B	  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
1088B	  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
1120B	  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
1168B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

1184B	bb.9:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edx, $rax
1232B	  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.6

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.4(0x40000000), %bb.3(0x40000000); %bb.4(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !27; example.rs:9:12
  JMP_1 %bb.3, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.4.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.5.bb4.us:
; predecessors: %bb.4, %bb.5
  successors: %bb.8(0x04000000), %bb.5(0x7c000000); %bb.8(3.12%), %bb.5(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.8:
; predecessors: %bb.5
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax

bb.6.bb6:
; predecessors: %bb.1, %bb.8, %bb.9
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.7.bb4:
; predecessors: %bb.3, %bb.7
  successors: %bb.9(0x04000000), %bb.7(0x7c000000); %bb.9(3.12%), %bb.7(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.9:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edx, $rax
  JMP_1 %bb.6

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.7

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.1, %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  JMP_1 %bb.7

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.1, %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rdi = COPY renamable $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET 0, $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !27; example.rs:9:12

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4:
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.7

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us:
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit killed $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  renamable $eax = LEA64_32r killed renamable $rax, 1, killed renamable $rsi, 3, $noreg, implicit-def $rax, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function _ZN7example3foo17hda9c57ed47971229E: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $rdi

bb.0.start:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rdi
  renamable $rcx = MOV64rm killed renamable $rdi, 1, $noreg, 16, $noreg, debug-location !14 :: (dereferenceable load (s64) from %ir.0); example.rs:8:14
  TEST64rr renamable $rcx, renamable $rcx, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.1, 4, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.2.bb4.lr.ph:
; predecessors: %bb.0
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)
  liveins: $rcx
  TEST8ri renamable $cl, 1, implicit-def $eflags
  JCC_1 %bb.3, 5, implicit $eflags, debug-location !27; example.rs:9:12

bb.5.bb4.us.preheader:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3

bb.6.bb4.us (align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $edx = ADD32rr killed renamable $edx(tied-def 0), renamable $edx, implicit-def dead $eflags, debug-location !29; example.rs:10:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.6, 5, implicit $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JMP_1 %bb.7, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]

bb.1:
; predecessors: %bb.0

  renamable $eax = MOV32ri 3, implicit-def $rax
  renamable $edx = MOV32ri 3
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

bb.3.bb4.preheader:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $rcx
  renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  renamable $edx = MOV32ri 3
  renamable $eax = MOV32ri 3, implicit-def $rax

bb.4.bb4 (align 16):
; predecessors: %bb.3, %bb.4
  successors: %bb.7(0x04000000), %bb.4(0x7c000000); %bb.7(3.12%), %bb.4(96.88%)
  liveins: $edx, $rax, $rcx
  renamable $esi = LEA64_32r renamable $rax, 2, renamable $rax, 0, $noreg, debug-location !34; example.rs:12:22
  renamable $esi = SHL32ri killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = SUB32rr killed renamable $esi(tied-def 0), renamable $eax, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = MOVSX64rr32 killed renamable $esi, debug-location !34; example.rs:12:22
  renamable $rsi = IMUL64rri32 killed renamable $rsi, 1717986919, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  $rdi = MOV64rr $rsi, debug-location !34; example.rs:12:22
  renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 63, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 37, implicit-def dead $eflags, debug-location !34; example.rs:12:22
  renamable $esi = ADD32rr renamable $esi(tied-def 0), renamable $edi, implicit-def dead $eflags, implicit killed $rdi, implicit killed $rsi, implicit-def $rsi, debug-location !34; example.rs:12:22
  $eax = ADD32rr $eax(tied-def 0), $esi, implicit-def $eflags, implicit $rax, implicit $rsi, debug-location !36; example.rs:12:13
  $eax = ADD32ri8 $eax(tied-def 0), 3, implicit-def $eflags, debug-location !36; example.rs:12:13
  renamable $rcx = ADD64ri8 killed renamable $rcx(tied-def 0), -4, implicit-def $eflags, debug-location !17; /rustc/07c993eba8b76eae497e98433ae075b00f01be10/library/core/src/slice/iter/macros.rs:136:24 @[ example.rs:8:14 ]
  JCC_1 %bb.4, 5, implicit $eflags

bb.7.bb6:
; predecessors: %bb.6, %bb.4
  liveins: $edx, $rax
  renamable $eax = IMUL32rr renamable $eax(tied-def 0), killed renamable $edx, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !32; example.rs:15:5
  $eax = KILL renamable $eax, implicit killed $rax, debug-location !33; example.rs:16:2
  RET64 $eax, debug-location !33; example.rs:16:2

# End machine code for function _ZN7example3foo17hda9c57ed47971229E.

[0m[1m[33mwarning[0m[0m[1m: 1 warning emitted[0m
